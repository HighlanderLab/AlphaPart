[{"path":"https://alphagenes.github.io/AlphaPart/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to AlphaPart","title":"Contributing to AlphaPart","text":"want start thanking taking time contribute! following set guidelines contributing AlphaPart packages hosted AlphaGenes Organization GitHub. suggest using best judgment, feel free propose changes document pull request.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table Of Contents","title":"Contributing to AlphaPart","text":"question! know get started? AphaPart package AlphaPart Decisions Can Contribute? Reporting Bugs Pull Requests","code":""},{"path":"https://alphagenes.github.io/AlphaPart/CONTRIBUTING.html","id":"i-have-only-a-question","dir":"","previous_headings":"","what":"I have only a question!","title":"Contributing to AlphaPart","text":"encourage people opening issue ask question report bug.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/CONTRIBUTING.html","id":"alphapart-package","dir":"","previous_headings":"What should I know before I get started?","what":"AlphaPart package","title":"Contributing to AlphaPart","text":"AlphaPart open-source project. initially consider contributing AlphaPart, might sure using AlphaGenes/AlphaPart repository implement functionality want change report bug. section help . AlphaPart intentionally coded using standard R build base idea C++ using Rcpp package speed analysis. R code can founded usual R folder C++ scr folder.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/CONTRIBUTING.html","id":"design-decisions","dir":"","previous_headings":"What should I know before I get started?","what":"Design Decisions","title":"Contributing to AlphaPart","text":"make significant decision upgrading package version, document News file. question updating package fixed bugs, check see reported . documented , please open new issue AlphaGenes/AlphaPart ask question.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/CONTRIBUTING.html","id":"reporting-bugs","dir":"","previous_headings":"How Can I Contribute?","what":"Reporting Bugs","title":"Contributing to AlphaPart","text":"section guides submitting bug report AlphaPart. Following guidelines helps maintainers community understand message, reproduce reported behaviour, find related reports. creating bug reports AlphaGenes/AlphaPart, please check someone already report. Thus don’t need make another one. create bug report, please include many details possible resolve issues faster. Note: find Closed issue seems like thing ’re experiencing, open new issue include link original issue body new one.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/CONTRIBUTING.html","id":"how-to-submit-a-good-bug-report","dir":"","previous_headings":"How Can I Contribute? > Reporting Bugs","what":"How to submit a (good) bug report?","title":"Contributing to AlphaPart","text":"Bugs tracked GitHub issues. expected explain problem include additional information help maintainers reproduce problem. Use clear informative title issue identify problem experiencing. Describe exact steps reproduce problem many details possible. case, can use tiny dataset example demonstrate steps. applicable, please, explain behaviour expected see instead expected . problem related package performance computer memory, include CPU Memory profile report. may want start looking top htop see processes overview Unix operating system (Linux MAC). hand, can open Performance Analyzer log Windows system try understand issue occurring.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"How Can I Contribute?","what":"Pull Requests","title":"Contributing to AlphaPart","text":"looking accepting pull request: Maintain AlphaPart quality Fix problems important end-users Engage community working toward best possible AlphaPart pull request way suggest changes repository. merge changes, deployed CRAN repository soon enough tests changes development version. learn opening pull request repository, see Opening pull request .","code":""},{"path":"https://alphagenes.github.io/AlphaPart/CONTRIBUTING.html","id":"opening-a-pull-request","dir":"","previous_headings":"How Can I Contribute?","what":"Opening a pull request","title":"Contributing to AlphaPart","text":"can use GitHub user interface minor changes, fixing typo updating readme function. can also fork repo clone locally view changes run tests machine.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/CONTRIBUTING.html","id":"submit-your-pull-request-and-get-it-reviewed-by-our-team","dir":"","previous_headings":"How Can I Contribute?","what":"Submit your pull request and get it reviewed by our team","title":"Contributing to AlphaPart","text":"submit PR, others AlphaPart team review . , may questions PR, may ask solve . issue, merge conflict? Check git tutorial resolving merge conflicts issues. PR successfully merged, proudly listed contributor contributor chart.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/articles/alphapart-variance.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading packages","title":"Partitioning genetic trends in mean and variance","text":"","code":"#======================================================================= # Packges #======================================================================= #devtools::install_github(\"AlphaGenes/AlphaPart\") library(AlphaPart) ## Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  ##   object 'type_sum.accel' not found library(dplyr) library(ggplot2) library(ggridges)"},{"path":"https://alphagenes.github.io/AlphaPart/articles/alphapart-variance.html","id":"loading-datafile","dir":"Articles","previous_headings":"","what":"Loading datafile","title":"Partitioning genetic trends in mean and variance","text":"ind - individual father mother - individual’s parents sex - individual sex status - individual selected path - path variable used partition additive genetic mean tbv - true breeding value pheno - phenotypic value","code":"#======================================================================= # Reading and organizing Scenario 1 #======================================================================= data <-  readRDS(\"./../inst/extdata/AlphaPartCattleSim.rds\") %>%   dplyr::mutate(across(generation:mother, as.numeric)) %>%   dplyr::rename(status = type) %>%   dplyr::mutate(across(c(\"sex\", \"status\"), as.factor)) %>%   dplyr::mutate(path = interaction(sex,status, sep = \":\")) %>%   arrange(generation, ind) %>%   select(ind, father, mother, sex, status, path, generation, tbv, pheno) %>%   dplyr::mutate(generation = generation - 20) %>%   droplevels()  # Data head head(data) %>%   knitr::kable(digits = 2) # Data size dim(data) ## [1] 42000     9"},{"path":"https://alphagenes.github.io/AlphaPart/articles/alphapart-variance.html","id":"partitioning-trends-in-genetic-mean-and-variance","dir":"Articles","previous_headings":"","what":"Partitioning trends in genetic mean and variance","title":"Partitioning genetic trends in mean and variance","text":"use AlphaPart function partition true breeding values (tbv) data animal sex status variable combination females (F) males (M) non-selected (N) males selected (S) contributions: use generic summary.AlphaPart function summarize AlphaPart object generation, con*sering: function mean function variance","code":"part <- AlphaPart(data, colId = \"ind\", colFid = \"father\",                    colMid = \"mother\", colBV = \"tbv\", colPath = \"path\") ##  ## Size: ##  - individuals: 42000  ##  - traits: 1 (tbv) ##  - paths: 3 (F:Non-Selected, M:Non-Selected, M:Selected) ##  - unknown (missing) values: ## tbv  ##   0 head(part$tbv) %>%   knitr::kable(digits = 2) # Trends in the additve genetic mean partMean <- summary(part, by = \"generation\", FUN = mean)  head(partMean$tbv) %>%   knitr::kable(digits = 2) # Trends in the additive genetic variance partVar <- summary(part, by = \"generation\", FUN = var, cov = TRUE)  head(partVar$tbv) %>%   knitr::kable(digits = 2)"},{"path":"https://alphagenes.github.io/AlphaPart/articles/alphapart-variance.html","id":"example-of-plots-to-analyse-the-results","dir":"Articles","previous_headings":"Partitioning trends in genetic mean and variance","what":"Example of plots to analyse the results","title":"Partitioning genetic trends in mean and variance","text":"Distribution breeding value partitions sex selection status (selected males (M(S)), non-selected males (M(N)), females (F)) generations.  Partitions genetic mean variance sex selection status (selected males (M(S)), non-selected males (M(N)), females (F)) using true breeding values:","code":"part$tbv %>%   ggplot(aes(y = as.factor(generation), `tbv_F:Non-Selected`)) +   geom_density_ridges(     aes(fill = \"F - Non-Selected\", linetype = \"F - Non-Selected\"),     alpha = .4, point_alpha = 1, rel_min_height = 0.01   ) +   geom_density_ridges(     aes(y = as.factor(generation), x= `tbv_M:Non-Selected`, fill = \"M - Non-Selected\",         linetype = \"M - Non-Selected\"),     alpha = .4, point_alpha = 1, rel_min_height = 0.01   ) +   geom_density_ridges(     aes(y = as.factor(generation), x= `tbv_M:Selected`, fill = \"M - Selected\",         linetype = \"M - Selected\"),     alpha = .4, point_alpha = 1, rel_min_height = 0.01   ) +   geom_density_ridges(     aes(y = as.factor(generation), x= `tbv`,         fill = \"Sum\", linetype = \"Sum\"),     alpha = .4, point_alpha = 1, rel_min_height = 0.01   ) +   ylab(\"Generation\") +   xlab(\"Density plot of breeding value partitions\") +   labs(fill = \"Path:\", linetype = \"Path:\") +   theme_bw(base_size = 20) +   theme(     legend.position = \"top\"   ) ## Picking joint bandwidth of 0.0624 ## Picking joint bandwidth of 0.0073 ## Picking joint bandwidth of 0.0357 ## Picking joint bandwidth of 0.0918 partMean$tbv %>%   ggplot(aes(y = Sum, x = generation, colour = \"Sum\"),          size = 0.1) +   scale_linetype_manual(     values = c(\"solid\", \"longdash\", \"dashed\", \"dotted\"))+   geom_line() +   geom_line(aes(y = `F:Non-Selected`, x = generation,                  colour = \"F\"), alpha = 0.8) +   geom_line(aes(y = `M:Selected`, x = generation,                 colour = \"M(S)\"), alpha = 0.8) +   geom_line(aes(y = `M:Non-Selected`, x = generation,                 colour = \"M(N)\"), alpha = 0.8) +   geom_vline(xintercept = 0, linetype = 2, alpha = 0.3) +   ylab(\"Genetic Mean\") +   xlab(\"Generation\") +   labs(colour = \"Path:\") +   theme_bw(base_size = 18) +    theme(legend.position = \"top\") partVar$tbv %>%   ggplot(aes(y = Sum, x = generation, colour = \"Sum\")) +   geom_line() +   geom_line(aes(y = `F:Non-Selected`, x = generation,             colour = \"F\"), alpha = 0.8) +   geom_line(aes(y = `F:Non-SelectedM:Selected`, x = generation,             colour = \"F:M(S)\"), size =0.5, alpha =0.8) +   geom_line(aes(y = `F:Non-SelectedM:Non-Selected`, x = generation,             colour = \"F:M(N)\"), size =0.5, alpha =0.6) +   geom_line(aes(y = `M:Non-SelectedM:Selected`, x = generation,             colour = \"M(N):M(S)\"), size =0.5, alpha =0.6) +   geom_line(aes(y = `M:Selected`, x = generation,             colour = \"M(S)\"), alpha = 0.8) +   geom_line(aes(y = `M:Non-Selected`, x = generation,             colour = \"M(N)\"), size =0.5, alpha =0.8) +   geom_vline(xintercept = 0, linetype = 2, alpha = 0.3) +   ylab(\"Genetic Variance\") +   xlab(\"Generation\") +   labs(colour = \"Path: \") +   theme_bw(base_size = 18) +   theme(     legend.position = \"top\"   ) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated."},{"path":"https://alphagenes.github.io/AlphaPart/articles/alphapart-vignette.html","id":"alphapart","dir":"Articles","previous_headings":"","what":"AlphaPart","title":"AlphaPart - R implementation of the method for partitioning genetic trends","text":"AlphaPart R package available CRAN repository https://CRAN.R-project.org/package=AlphaPart. consists main function AlphaPart partitioning breeding values auxiliary functions manipulating data summarizing, visualizing, saving results. package includes example dataset AlphaPart.ped, includes four-generation pedigree information generation, country, gender, breeding values. describe demonstrate functions dataset. install load package : use AlphaPart function partition breeding values (bv1) AlphaPart.ped country variable domestic import contributions: partitioning function AlphaPart requires data frame holding pedigree animal/sire/dam animal/sire/maternal-grandsire, time-ordering variable year birth, partition variable (path), breeding values. Following method described García-Cortés et al. (2008), recurse pedigree oldest youngest individuals, individual calculate parent average Mendelian sampling terms number traits assign terms paths. partition multiple traits specifying vector variables, say colBV = c(“bv1”, “bv2”). multiple trait option can also serve partition samples posterior distribution quantify uncertainty (Sorensen et al., 1994; Škorput et al., 2015). speed-calculations use C++ trait-vectorised partitioning. function can also directly partition summarize path contributions “--fly”, useful computational speed-huge pedigrees. output object function either AlphaPart summaryAlphaPart class. use generic summary.AlphaPart function summarize AlphaPart object grouping variable, say generation (gen): summary function summarizes breeding values path partitions levels grouping variable. default, summarize mean, user can specify R function via FUN argument. summary function can also summarize subset object via subset argument. use generic plot.summaryAlphaPart function plot summarized partitions: provide number utility functions ease partitioning analysis. pedFixBirthYear function impute missing fix erroneous years birth. pedSetBase function set base population specifying founders removing older pedigree records. AlphaPartSubset function keep partitions specified paths AlphaPart summaryAlphaPart objects. AlphaPartSum function sum partitions several paths summaryAlphaPart object. AlphaPartSubset AlphaPartSum functions simplify presentation partitioning analysis.","code":"install.packages(pkg = “AlphaPart”) library(package = \"AlphaPart\") data(AlphaPart.ped) part <- AlphaPart(x = AlphaPart.ped,                 colPath = “country”,                 colBV = “bv1”) sumPartByGen <- summary(part, by = “gen”) print(sumPartByGen) plot(sumPartByGen)"},{"path":"https://alphagenes.github.io/AlphaPart/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gregor Gorjanc. Author, maintainer. Jana Obsteter. Author. Thiago de Paula Oliveira. Author.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gorjanc G, Obsteter J, de Paula Oliveira T (2024). AlphaPart: Partition/Decomposition Breeding Values Paths Information. R package version 0.9.8.","code":"@Manual{,   title = {AlphaPart: Partition/Decomposition of Breeding Values by Paths of Information},   author = {Gregor Gorjanc and Jana Obsteter and Thiago {de Paula Oliveira}},   year = {2024},   note = {R package version 0.9.8}, }"},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"AlphaPart - partitioning genetic trends","text":"AlphaPart sophisticated R package partitioning genetic trends (Obšteter et al. 2021), facilitating deeper understanding genetic gain breeding programs. method, rooted innovative works Garcia-Cortes et al. (2008) recent advancements, allows breeders researchers dissect contributions various selection paths overall genetic progress.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"AlphaPart - partitioning genetic trends","text":"Implements cutting-edge methods partitioning genetic means variances. Includes functions data manipulation, ensuring compatibility diverse data sets. Offers advanced tools visualizing genetic trends partitioning results. Provides robust summarizing capabilities interpret complex genetic data.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/index.html","id":"new-in-this-version","dir":"","previous_headings":"","what":"New in This Version","title":"AlphaPart - partitioning genetic trends","text":"Incorporates recent methods partitioning genetic variance, providing holistic view breeding values (Oliveira et al. 2022). Improved algorithms accurate insightful analysis breeding programs. New visualization features intuitive understanding genetic trends.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/index.html","id":"instalation","dir":"","previous_headings":"","what":"Instalation","title":"AlphaPart - partitioning genetic trends","text":"","code":"# The easiest way to get AlphaPart install.packages(\"AlphaPart\")"},{"path":"https://alphagenes.github.io/AlphaPart/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development version","title":"AlphaPart - partitioning genetic trends","text":"get bug fix use feature development version, can install development version AlphaPart GitHub.","code":"install.packages(\"devtools\") devtools::install_github(\"AlphaGenes/AlphaPart\")"},{"path":"https://alphagenes.github.io/AlphaPart/index.html","id":"contributing-to-alphapart","dir":"","previous_headings":"","what":"Contributing to AlphaPart","title":"AlphaPart - partitioning genetic trends","text":"Please, follow contribution guide Contributing file know start contributing AlphaPart.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"AlphaPart - partitioning genetic trends","text":"","code":"library(AlphaPart)  ## Partition additive genetic values by country and sex AlphaPart.ped$country.gender <- with(AlphaPart.ped, paste(country, gender, sep=\"-\")) (res <- AlphaPart(x=AlphaPart.ped, colPath=\"country.gender\", colBV=c(\"bv1\", \"bv2\"))) #> Size: #>  - individuals: 8  #>  - traits: 2 (bv1, bv2) #>  - paths: 4 (domestic-F, domestic-M, import-F, import-M) #>  - unknown (missing) values: #> bv1 bv2  #>   0   0    #>  Partitions of breeding values  #>    - individuals: 8  #>    - paths: 4 (domestic-F, domestic-M, import-F, import-M) #>    - traits: 2 (bv1, bv2)  #>  Trait: bv1   #>   IId FId MId gen  country gender country.gender bv1 bv1_pa bv1_w bv1_domestic-F bv1_domestic-M bv1_import-F bv1_import-M #> 1   A           1 domestic      F     domestic-F 100    0.0 100.0        100.000            0.0          0.0        0.000 #> 2   B           1   import      M       import-M 105    0.0 105.0          0.000            0.0          0.0      105.000 #> 3   C   B   A   2 domestic      F     domestic-F 104  102.5   1.5         51.500            0.0          0.0       52.500 #> 4   T   B       2   import      F       import-F 102   52.5  49.5          0.000            0.0         49.5       52.500 #> 5   D           2   import      M       import-M 108    0.0 108.0          0.000            0.0          0.0      108.000 #> 6   E   D   C   3 domestic      M     domestic-M 107  106.0   1.0         25.750            1.0          0.0       80.250 #> 7   U   D       3   import      F       import-F 107   54.0  53.0          0.000            0.0         53.0       54.000 #> 8   V   E       4 domestic      F     domestic-F 109   53.5  55.5         68.375            0.5          0.0       40.125  #>  Trait: bv2   #>   IId FId MId gen  country gender country.gender bv2 bv2_pa bv2_w bv2_domestic-F bv2_domestic-M bv2_import-F bv2_import-M #> 1   A           1 domestic      F     domestic-F  88    0.0  88.0          88.00           0.00          0.0          0.0 #> 2   B           1   import      M       import-M 110    0.0 110.0           0.00           0.00          0.0        110.0 #> 3   C   B   A   2 domestic      F     domestic-F 100   99.0   1.0          45.00           0.00          0.0         55.0 #> 4   T   B       2   import      F       import-F  97   55.0  42.0           0.00           0.00         42.0         55.0 #> 5   D           2   import      M       import-M 101    0.0 101.0           0.00           0.00          0.0        101.0 #> 6   E   D   C   3 domestic      M     domestic-M  80  100.5 -20.5          22.50         -20.50          0.0         78.0 #> 7   U   D       3   import      F       import-F 102   50.5  51.5           0.00           0.00         51.5         50.5 #> 8   V   E       4 domestic      F     domestic-F 105   40.0  65.0          76.25         -10.25          0.0         39.0   ## Summarize population by generation (=trend) (ret <- summary(res, by=\"gen\"))  #> Summary of partitions of breeding values  #>   - paths: 4 (domestic-F, domestic-M, import-F, import-M) #>   - traits: 2 (bv1, bv2)  #> Trait: bv1   #>   gen N      Sum domestic-F domestic-M import-F import-M #> 1   1 2 102.5000   50.00000        0.0      0.0   52.500 #> 2   2 3 104.6667   17.16667        0.0     16.5   71.000 #> 3   3 2 107.0000   12.87500        0.5     26.5   67.125 #> 4   4 1 109.0000   68.37500        0.5      0.0   40.125  #> Trait: bv2   #>   gen N       Sum domestic-F domestic-M import-F import-M #> 1   1 2  99.00000      44.00       0.00     0.00 55.00000 #> 2   2 3  99.33333      15.00       0.00    14.00 70.33333 #> 3   3 2  91.00000      11.25     -10.25    25.75 64.25000 #> 4   4 1 105.00000      76.25     -10.25     0.00 39.00000  ## Plot the partitions p <- plot(ret, ylab=c(\"BV for trait 1\", \"BV for trait 2\"), xlab=\"Generation\") print(p)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.html","id":null,"dir":"Reference","previous_headings":"","what":"AlphaPart.R — AlphaPart","title":"AlphaPart.R — AlphaPart","text":"function partition breeding values path variable. partition method described García-Cortés et al., 2008: Partition genetic trend validate multiple selection decisions.  Animal : international journal animal bioscience. DOI:  doi:10.1017/S175173110800205X","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AlphaPart.R — AlphaPart","text":"","code":"AlphaPart(x, pathNA, recode, unknown, sort, verbose, profile,   printProfile, pedType, colId, colFid, colMid, colPath, colBV,   colBy, center, scaleEBV)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AlphaPart.R — AlphaPart","text":"x data.frame , (least) following columns: individual, father, mother identif ication, year birth; see arguments colId, colFid, colMid, colPath, colBV; see also details validity pedigree. pathNA Logical, set dummy path (\"XXX\") path information unknown (missing). recode Logical, internally recode individual, father , mother identification 1:n codes, missing parents defined 0; option must used identif ications x already given 1:n codes, see also argument sort. unknown Value(s) used representing unknown (missing) parent x; options effect recode=FALSE needed situation. sort Logical, initially sort x using orderPed() children follow parents order make imputation optimal possible (imputation performed within loop first last unknown birth year); end original order restored. verbose Numeric, print additional information: 0 - print nothing, 1 - print summaries data. profile Logical, collect timings size objects. printProfile Character, print profile info fly (\"fly\") end (\"end\"). pedType Character, pedigree type: common form \"IPP\" Individual, Parent 1 (say father), Parent 2 (say mother) data; second form \"IPG\" Individual, Parent 1 (say father), one Grandparents Parent 2 (say maternal grandfather). colId Numeric character, position name column holding individual identif ication. colFid Numeric character, position name column holding father identif ication. colMid Numeric character, position name column holding mother identif ication maternal grandparent identif ication pedType=\"IPG\" . colPath Numeric character, position name column holding path information. colBV Numeric character, position(s) name(s) column(s) holding breeding Values. colBy Numeric character, position name column holding group information (see details). center Logical, center=TRUE detect shift base population mean attributes parent average effect rather Mendelian sampling effect, otherwise, center=FALSE, base population values accounted Mendelian sampling effect. Default center = TRUE. scaleEBV list two arguments defining whether appropriate center /scale colBV columns respect base population. list may contain following components: center: logical value scale: logical value. center = TRUE scale = TRUE base population set zero mean unit variance.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AlphaPart.R — AlphaPart","text":"object class AlphaPart, can used analyses - handy summary method (summary.AlphaPart works objects AlphaPart class) plot method output (plot.summaryAlphaPart works objects summaryAlphaPart class).  Class AlphaPart list. first length(colBV) components (one trait named trait label, say trt) data frames. data.frame contains: x columns initial data x trt_pa parent average trt_wMendelian sampling term trt_path1, trt_path2, ... breeding value partitions last component returned object also list named info following components holding meta information analysis: path column name holding path information nP number paths lP path labels nT number traits lT trait labels warn potential warning messages associated object colBy!=NULL resulting object class summaryAlphaPart, see summary.AlphaPart details. profile=TRUE, profiling info printed screen spot computational bottlenecks.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AlphaPart.R — AlphaPart","text":"Pedigree x must valid sense : directed loops (simplest example individual identification equal identification father mother) bisexuality, e.g., fathers appear mothers father /mother can unknown (missing) - defined \"code\" different existing identifications Unknown (missing) values breeding values propagated pedigree provide available values genetic evaluation. Another option cut pedigree links - set parents unknown remove pedigree prior using function - see pedSetBase function.  Warning issued case unknown (missing) values. animal breeding/genetics literature model underlying pedigree type \"IPP\" often called animal model, model pedigree type \"IPG\" often called sire - maternal grandsire model. combination colFid colMid mother - paternal grandsire model can accomodated well. Argument colBy can used directly perform summary analysis group, .e., summary(AlphaPart(...), =\"group\"). See summary.AlphaPart . can save CPU time skipping intermediate steps. However, means can obtained, summary method gives flexibility.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"AlphaPart.R — AlphaPart","text":"Garcia-Cortes, L. . et al. (2008) Partition genetic trend validate multiple selection decisions. Animal, 2(6):821-824. doi:10.1017/S175173110800205X","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AlphaPart.R — AlphaPart","text":"","code":"## Small pedigree with additive genetic (=breeding) values ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),                    fid=c(  0,   0,   2,   0,   4,   0),                    mid=c(  0,   0,   1,   0,   3,   3),                    loc=c(\"A\", \"B\", \"A\", \"B\", \"A\", \"A\"),                    gen=c(  1,   1,   2,   2,   3,   3),                   trt1=c(100, 120, 115, 130, 125, 125),                   trt2=c(100, 110, 105, 100,  85, 110))  ## Partition additive genetic values tmp <- AlphaPart(x=ped, colBV=c(\"trt1\", \"trt2\")) #>  #> Size: #>  - individuals: 6  #>  - traits: 2 (trt1, trt2) #>  - paths: 2 (A, B) #>  - unknown (missing) values: #> trt1 trt2  #>    0    0  print(tmp) #>  #>  #>  Partitions of breeding values  #>    - individuals: 6  #>    - paths: 2 (A, B) #>    - traits: 2 (trt1, trt2) #>  #>  Trait: trt1  #>  #>   id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A trt1_B #> 1  1   0   0   A   1  100 116.6667 -16.666667    100      0 #> 2  2   0   0   B   1  120 116.6667   3.333333      0    120 #> 3  3   2   1   A   2  115 110.0000   5.000000     55     60 #> 4  4   0   0   B   2  130 116.6667  13.333333      0    130 #> 5  5   4   3   A   3  125 122.5000   2.500000     30     95 #> 6  6   0   3   A   3  125  57.5000  67.500000     95     30 #>  #>  Trait: trt2  #>  #>   id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A trt2_B #> 1  1   0   0   A   1  100 103.3333  -3.333333  100.0    0.0 #> 2  2   0   0   B   1  110 103.3333   6.666667    0.0  110.0 #> 3  3   2   1   A   2  105 105.0000   0.000000   50.0   55.0 #> 4  4   0   0   B   2  100 103.3333  -3.333333    0.0  100.0 #> 5  5   4   3   A   3   85 102.5000 -17.500000    7.5   77.5 #> 6  6   0   3   A   3  110  52.5000  57.500000   82.5   27.5 #>   ## Summarize by generation (genetic mean) summary(tmp, by=\"gen\") #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (A, B) #>    - traits: 2 (trt1, trt2) #>  #>  Trait: trt1  #>  #>   gen N   Sum    A    B #> 1   1 2 110.0 50.0 60.0 #> 2   2 2 122.5 27.5 95.0 #> 3   3 2 125.0 62.5 62.5 #>  #>  Trait: trt2  #>  #>   gen N   Sum  A    B #> 1   1 2 105.0 50 55.0 #> 2   2 2 102.5 25 77.5 #> 3   3 2  97.5 45 52.5 #>   ## Summarize by generation (genetic variance) summary(tmp, by=\"gen\", FUN = var) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (A, B, Sum.Cov) #>    - traits: 2 (trt1, trt2) #>  #>  Trait: trt1  #>  #>   gen N   Sum      A      B Sum.Cov #> 1   1 2 200.0 5000.0 7200.0  -12000 #> 2   2 2 112.5 1512.5 2450.0   -3850 #> 3   3 2   0.0 2112.5 2112.5   -4225 #>  #>  Trait: trt2  #>  #>   gen N   Sum      A      B Sum.Cov #> 1   1 2  50.0 5000.0 6050.0  -11000 #> 2   2 2  12.5 1250.0 1012.5   -2250 #> 3   3 2 312.5 2812.5 1250.0   -3750 #>    # \\donttest{ ## There are also two demos   demo(topic=\"AlphaPart_deterministic\", package=\"AlphaPart\",        ask=interactive()) #>  #>  #> \tdemo(AlphaPart_deterministic) #> \t---- ~~~~~~~~~~~~~~~~~~~~~~~ #>  #> > ### partAGV_deterministic.R #> > ###----------------------------------------------------------------------------- #> > ### $Id$ #> > ###----------------------------------------------------------------------------- #> >  #> > ### DESCRIPTION OF A DEMONSTRATION #> > ###----------------------------------------------------------------------------- #> >  #> > ## A demonstration with a simple example to see in action the partitioning of #> > ## additive genetic values by paths (Garcia-Cortes et al., 2008; Animal) #> > ##        #> > ## DETERMINISTIC SIMULATION (sort of) #> > ## #> > ## We have two locations (1 and 2). The first location has individualss with higher #> > ## additive genetic value. Males from the first location are imported males to the #> > ## second location from generation 2/3. This clearly leads to genetic gain in the #> > ## second location. However, the second location can also perform their own selection #> > ## so the question is how much genetic gain is due to the import of genes from the #> > ## first location and due to their own selection. #> > ## #> > ## Above scenario will be tested with a simple example of a pedigree bellow. Two #> > ## scenarios will be evaluated: without or with own selection in the second location. #> > ## Selection will always be present in the first location. #> > ## #> > ## Additive genetic values are provided, i.e., no inference is being done! #> > ## #> > ## The idea of this example is not to do extensive simulations, but just to have #> > ## a simple example to see how the partitioning of additive genetic values works. #> >  #> > ### SETUP #> > ###----------------------------------------------------------------------------- #> >  #> > options(width=200) #>  #> > ### EXAMPLE PEDIGREE & SETUP OF MENDELIAN SAMPLING - \"DETERMINISTIC\" #> > ###----------------------------------------------------------------------------- #> >  #> > ## Generation 0 #> >   id0 <- c(\"01\", \"02\", \"03\", \"04\") #>  #> >  fid0 <- mid0 <- rep(NA, times=length(id0)) #>  #> >    h0 <- rep(c(1, 2), each=2) #>  #> >    g0 <- rep(0, times=length(id0)) #>  #> >   w10 <- c( 2, 2, 0, 0) #>  #> >   w20 <- c( 2, 2, 0, 0) #>  #> > ## Generation 1 #> >   id1 <- c(\"11\", \"12\", \"13\", \"14\") #>  #> >  fid1 <- c(\"01\", \"01\", \"03\", \"03\") #>  #> >  mid1 <- c(\"02\", \"02\", \"04\", \"04\") #>  #> >    h1 <- h0 #>  #> >    g1 <- rep(1, times=length(id1)) #>  #> >   w11 <- c( 0.6,  0.2, -0.6,  0.2) #>  #> >   w21 <- c( 0.6,  0.2,  0.6,  0.2) #>  #> > ## Generation 2 #> >   id2 <- c(\"21\", \"22\", \"23\", \"24\") #>  #> >  fid2 <- c(\"12\", \"12\", \"12\", \"12\") #>  #> >  mid2 <- c(\"11\", \"11\", \"13\", \"14\") #>  #> >    h2 <- h0 #>  #> >    g2 <- rep(2, times=length(id2)) #>  #> >   w12 <- c( 0.6,  0.3, -0.2,  0.2) #>  #> >   w22 <- c( 0.6,  0.3,  0.2,  0.2) #>  #> > ## Generation 3 #> >   id3 <- c(\"31\", \"32\", \"33\", \"34\") #>  #> >  fid3 <- c(\"22\", \"22\", \"22\", \"22\") #>  #> >  mid3 <- c(\"21\", \"21\", \"23\", \"24\") #>  #> >    h3 <- h0 #>  #> >    g3 <- rep(3, times=length(id3)) #>  #> >   w13 <- c( 0.7,  0.1, -0.3,  0.3) #>  #> >   w23 <- c( 0.7,  0.1,  0.3,  0.3) #>  #> > ## Generation 4 #> >   id4 <- c(\"41\", \"42\", \"43\", \"44\") #>  #> >  fid4 <- c(\"32\", \"32\", \"32\", \"32\") #>  #> >  mid4 <- c(\"31\", \"31\", \"33\", \"34\") #>  #> >    h4 <- h0 #>  #> >    g4 <- rep(4, times=length(id4)) #>  #> >   w14 <- c( 0.8,  0.8, -0.1,  0.3) #>  #> >   w24 <- c( 0.8,  0.8,  0.1,  0.3) #>  #> > ## Generation 5 #> >   id5 <- c(\"51\", \"52\", \"53\", \"54\") #>  #> >  fid5 <- c(\"42\", \"42\", \"42\", \"42\") #>  #> >  mid5 <- c(\"41\", \"41\", \"43\", \"44\") #>  #> >    h5 <- h0 #>  #> >    g5 <- rep(5, times=length(id4)) #>  #> >   w15 <- c( 0.8,  1.0, -0.2,  0.3) #>  #> >   w25 <- c( 0.8,  1.0,  0.2,  0.3) #>  #> > ped <- data.frame( id=c( id0,  id1,  id2,  id3,  id4,  id5), #> +                   fid=c(fid0, fid1, fid2, fid3, fid4, fid5), #> +                   mid=c(mid0, mid1, mid2, mid3, mid4, mid5), #> +                   loc=c(  h0,   h1,   h2,   h3,   h4,  h5), #> +                   gen=c(  g0,   g1,   g2,   g3,   g4,  g5), #> +                    w1=c( w10,  w11,  w12,  w13,  w14,  w15), #> +                    w2=c( w20,  w21,  w22,  w23,  w24,  w25)) #>  #> > ped$sex <- 2 #>  #> > ped[ped$id %in% ped$fid, \"sex\"] <- 1 #>  #> > ped$loc.gen <- with(ped, paste(loc, gen, sep=\"-\")) #>  #> > ### SIMULATE ADDITIVE GENETIC VALUES - SUM PARENT AVERAGE AND MENDELIAN SAMPLING #> > ###----------------------------------------------------------------------------- #> >  #> > ## Additive genetic mean in founders by location #> > mu1 <-  2 #>  #> > mu2 <-  0 #>  #> > ## Additive genetic variance in population #> > sigma2 <- 1 #>  #> > sigma  <- sqrt(sigma2) #>  #> > ## Threshold value for Mendelian sampling for selection - only values above this #> > ##  will be accepted in simulation #> > t <- 0 #>  #> > ped$agv1 <- ped$pa1 <- NA ## Scenario (trait) 1: No selection in the second location #>  #> > ped$agv2 <- ped$pa2 <- NA ## Scenario (trait) 2:    Selection in the second location #>  #> > ## Generation 0  - founders (no parent average here - so setting it to zero) #> > ped[ped$gen == 0, c(\"pa1\",  \"pa2\")] <- 0 #>  #> > ped[ped$gen == 0, c(\"agv1\", \"agv2\")] <- ped[ped$gen == 0, c(\"w1\", \"w2\")] #>  #> > ## Generation 1+ - non-founders (parent average + Mendelian sampling) #> > for(i in (length(g0)+1):nrow(ped)) { #> +   ped[i, \"pa1\"] <- 0.5 * (ped[ped$id %in% ped[i, \"fid\"], \"agv1\"] + #> +                           ped[ped$id %in% ped[i, \"mid\"], \"agv1\"]) #> +   ped[i, \"pa2\"] <- 0.5 * (ped[ped$id %in% ped[i, \"fid\"], \"agv2\"] + #> +                           ped[ped$id %in% ped[i, \"mid\"], \"agv2\"]) #> +   ped[i, c(\"agv1\", \"agv2\")] <- ped[i, c(\"pa1\", \"pa2\")] + ped[i, c(\"w1\", \"w2\")] #> + } #>  #> > ### PLOT INDIVIDUAL ADDITIVE GENETIC VALUES #> > ###----------------------------------------------------------------------------- #> >  #> > par(mfrow=c(2, 1), bty=\"l\", pty=\"m\", mar=c(2, 2, 1, 1) + .1, mgp=c(0.7, 0.2, 0)) #>  #> > tmp <- ped$gen + c(-1.5, -0.5, 0.5, 1.5) * 0.1 #>  #> > with(ped, plot(agv1 ~ tmp, pch=c(19, 21)[ped$loc], ylab=\"Additive genetic value\", #> +                xlab=\"Generation\", main=\"Selection in location 1\", axes=FALSE, #> +                ylim=range(c(agv1, agv2)))) #>  #> > axis(1, labels=FALSE, tick=FALSE); axis(2, labels=FALSE, tick=FALSE); box() #>  #> > legend(x=\"topleft\", legend=c(1, 2), title=\"Location\", pch=c(19, 21), bty=\"n\") #>  #> > with(ped, plot(agv2 ~ tmp, pch=c(19, 21)[ped$loc], ylab=\"Additive genetic value\", #> +                xlab=\"Generation\", main=\"Selection in locations 1 and 2\", axes=FALSE, #> +                ylim=range(c(agv1, agv2))))  #>  #> > axis(1, labels=FALSE, tick=FALSE); axis(2, labels=FALSE, tick=FALSE); box() #>  #> > legend(x=\"topleft\", legend=c(1, 2), title=\"Location\", pch=c(19, 21), bty=\"n\") #>  #> > ### PARTITION ADDITIVE GENETIC VALUES BY ... #> > ###----------------------------------------------------------------------------- #> >  #> > ## Compute partitions by location #> > (res <- AlphaPart(x=ped, colPath=\"loc\", colBV=c(\"agv1\", \"agv2\"))) #>  #> Size: #>  - individuals: 24  #>  - traits: 2 (agv1, agv2) #>  - paths: 2 (1, 2) #>  - unknown (missing) values: #> agv1 agv2  #>    0    0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 24  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   id  fid  mid loc gen  w1  w2 sex loc.gen pa1 pa2 agv1 agv1_pa agv1_w agv1_1 agv1_2 #> 1 01 <NA> <NA>   1   0 2.0 2.0   1     1-0   0   0  2.0       0    2.0    2.0      0 #> 2 02 <NA> <NA>   1   0 2.0 2.0   2     1-0   0   0  2.0       0    2.0    2.0      0 #> 3 03 <NA> <NA>   2   0 0.0 0.0   1     2-0   0   0  0.0       0    0.0    0.0      0 #> 4 04 <NA> <NA>   2   0 0.0 0.0   2     2-0   0   0  0.0       0    0.0    0.0      0 #> 5 11   01   02   1   1 0.6 0.6   2     1-1   2   2  2.6       2    0.6    2.6      0 #> 6 12   01   02   1   1 0.2 0.2   1     1-1   2   2  2.2       2    0.2    2.2      0 #> ... #>    id fid mid loc gen   w1  w2 sex loc.gen  pa1   pa2 agv1 agv1_pa agv1_w agv1_1  agv1_2 #> 19 43  32  33   2   4 -0.1 0.1   2     2-4 2.15 2.700 2.05    2.15   -0.1 2.4250 -0.3750 #> 20 44  32  34   2   4  0.3 0.3   2     2-4 2.65 2.650 2.95    2.65    0.3 2.4250  0.5250 #> 21 51  42  41   1   5  0.8 0.8   2     1-5 4.05 4.050 4.85    4.05    0.8 4.8500  0.0000 #> 22 52  42  41   1   5  1.0 1.0   2     1-5 4.05 4.050 5.05    4.05    1.0 5.0500  0.0000 #> 23 53  42  43   2   5 -0.2 0.2   2     2-5 3.05 3.425 2.85    3.05   -0.2 3.2375 -0.3875 #> 24 54  42  44   2   5  0.3 0.3   2     2-5 3.50 3.500 3.80    3.50    0.3 3.2375  0.5625 #>  #>  Trait: agv2  #>  #>   id  fid  mid loc gen  w1  w2 sex loc.gen pa1 pa2 agv2 agv2_pa agv2_w agv2_1 agv2_2 #> 1 01 <NA> <NA>   1   0 2.0 2.0   1     1-0   0   0  2.0       0    2.0    2.0      0 #> 2 02 <NA> <NA>   1   0 2.0 2.0   2     1-0   0   0  2.0       0    2.0    2.0      0 #> 3 03 <NA> <NA>   2   0 0.0 0.0   1     2-0   0   0  0.0       0    0.0    0.0      0 #> 4 04 <NA> <NA>   2   0 0.0 0.0   2     2-0   0   0  0.0       0    0.0    0.0      0 #> 5 11   01   02   1   1 0.6 0.6   2     1-1   2   2  2.6       2    0.6    2.6      0 #> 6 12   01   02   1   1 0.2 0.2   1     1-1   2   2  2.2       2    0.2    2.2      0 #> ... #>    id fid mid loc gen   w1  w2 sex loc.gen  pa1   pa2  agv2 agv2_pa agv2_w agv2_1 agv2_2 #> 19 43  32  33   2   4 -0.1 0.1   2     2-4 2.15 2.700 2.800   2.700    0.1 2.4250 0.3750 #> 20 44  32  34   2   4  0.3 0.3   2     2-4 2.65 2.650 2.950   2.650    0.3 2.4250 0.5250 #> 21 51  42  41   1   5  0.8 0.8   2     1-5 4.05 4.050 4.850   4.050    0.8 4.8500 0.0000 #> 22 52  42  41   1   5  1.0 1.0   2     1-5 4.05 4.050 5.050   4.050    1.0 5.0500 0.0000 #> 23 53  42  43   2   5 -0.2 0.2   2     2-5 3.05 3.425 3.625   3.425    0.2 3.2375 0.3875 #> 24 54  42  44   2   5  0.3 0.3   2     2-5 3.50 3.500 3.800   3.500    0.3 3.2375 0.5625 #>  #>  #> > ## Summarize whole population #> > (ret <- summary(res)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   N NA     Sum        1         2 #> 1 1 24 2.33125 2.346875 -0.015625 #>  #>  Trait: agv2  #>  #>   N NA      Sum        1         2 #> 1 1 24 2.532292 2.346875 0.1854167 #>  #>  #> > ## Summarize and plot by generation (=trend) #> > (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   gen N    Sum       1        2 #> 1   0 4 1.0000 1.00000  0.00000 #> 2   1 4 1.1000 1.20000 -0.10000 #> 3   2 4 1.9250 1.97500 -0.05000 #> 4   3 4 2.5500 2.57500 -0.02500 #> 5   4 4 3.2750 3.23750  0.03750 #> 6   5 4 4.1375 4.09375  0.04375 #>  #>  Trait: agv2  #>  #>   gen N     Sum       1      2 #> 1   0 4 1.00000 1.00000 0.0000 #> 2   1 4 1.40000 1.20000 0.2000 #> 3   2 4 2.17500 1.97500 0.2000 #> 4   3 4 2.82500 2.57500 0.2500 #> 5   4 4 3.46250 3.23750 0.2250 #> 6   5 4 4.33125 4.09375 0.2375 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends #> > (ret <- summary(res, by=\"loc.gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>    loc.gen N    Sum      1       2 #> 1      1-0 2  2.000 2.0000  0.0000 #> 2      1-1 2  2.400 2.4000  0.0000 #> 3      1-2 2  2.850 2.8500  0.0000 #> 4      1-3 2  3.250 3.2500  0.0000 #> 5      1-4 2  4.050 4.0500  0.0000 #> 6      1-5 2  4.950 4.9500  0.0000 #> 7      2-0 2  0.000 0.0000  0.0000 #> 8      2-1 2 -0.200 0.0000 -0.2000 #> 9      2-2 2  1.000 1.1000 -0.1000 #> 10     2-3 2  1.850 1.9000 -0.0500 #> 11     2-4 2  2.500 2.4250  0.0750 #> 12     2-5 2  3.325 3.2375  0.0875 #>  #>  Trait: agv2  #>  #>    loc.gen N    Sum      1     2 #> 1      1-0 2 2.0000 2.0000 0.000 #> 2      1-1 2 2.4000 2.4000 0.000 #> 3      1-2 2 2.8500 2.8500 0.000 #> 4      1-3 2 3.2500 3.2500 0.000 #> 5      1-4 2 4.0500 4.0500 0.000 #> 6      1-5 2 4.9500 4.9500 0.000 #> 7      2-0 2 0.0000 0.0000 0.000 #> 8      2-1 2 0.4000 0.0000 0.400 #> 9      2-2 2 1.5000 1.1000 0.400 #> 10     2-3 2 2.4000 1.9000 0.500 #> 11     2-4 2 2.8750 2.4250 0.450 #> 12     2-5 2 3.7125 3.2375 0.475 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 1 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 1)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N  Sum    1 2 #> 1     1-0 2 2.00 2.00 0 #> 2     1-1 2 2.40 2.40 0 #> 3     1-2 2 2.85 2.85 0 #> 4     1-3 2 3.25 3.25 0 #> 5     1-4 2 4.05 4.05 0 #> 6     1-5 2 4.95 4.95 0 #>  #>  Trait: agv2  #>  #>   loc.gen N  Sum    1 2 #> 1     1-0 2 2.00 2.00 0 #> 2     1-1 2 2.40 2.40 0 #> 3     1-2 2 2.85 2.85 0 #> 4     1-3 2 3.25 3.25 0 #> 5     1-4 2 4.05 4.05 0 #> 6     1-5 2 4.95 4.95 0 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 2 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 2)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N    Sum      1       2 #> 1     2-0 2  0.000 0.0000  0.0000 #> 2     2-1 2 -0.200 0.0000 -0.2000 #> 3     2-2 2  1.000 1.1000 -0.1000 #> 4     2-3 2  1.850 1.9000 -0.0500 #> 5     2-4 2  2.500 2.4250  0.0750 #> 6     2-5 2  3.325 3.2375  0.0875 #>  #>  Trait: agv2  #>  #>   loc.gen N    Sum      1     2 #> 1     2-0 2 0.0000 0.0000 0.000 #> 2     2-1 2 0.4000 0.0000 0.400 #> 3     2-2 2 1.5000 1.1000 0.400 #> 4     2-3 2 2.4000 1.9000 0.500 #> 5     2-4 2 2.8750 2.4250 0.450 #> 6     2-5 2 3.7125 3.2375 0.475 #>  #>  #> > plot(ret)   #>  #> > ## Compute partitions by location and sex #> > ped$loc.sex <- with(ped, paste(loc, sex, sep=\"-\")) #>  #> > (res <- AlphaPart(x=ped, colPath=\"loc.sex\", colBV=c(\"agv1\", \"agv2\"))) #>  #> Size: #>  - individuals: 24  #>  - traits: 2 (agv1, agv2) #>  - paths: 4 (1-1, 1-2, 2-1, 2-2) #>  - unknown (missing) values: #> agv1 agv2  #>    0    0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 24  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   id  fid  mid loc gen  w1  w2 sex loc.gen pa1 pa2 loc.sex agv1 agv1_pa agv1_w agv1_1-1 agv1_1-2 agv1_2-1 agv1_2-2 #> 1 01 <NA> <NA>   1   0 2.0 2.0   1     1-0   0   0     1-1  2.0       0    2.0      2.0      0.0        0        0 #> 2 02 <NA> <NA>   1   0 2.0 2.0   2     1-0   0   0     1-2  2.0       0    2.0      0.0      2.0        0        0 #> 3 03 <NA> <NA>   2   0 0.0 0.0   1     2-0   0   0     2-1  0.0       0    0.0      0.0      0.0        0        0 #> 4 04 <NA> <NA>   2   0 0.0 0.0   2     2-0   0   0     2-2  0.0       0    0.0      0.0      0.0        0        0 #> 5 11   01   02   1   1 0.6 0.6   2     1-1   2   2     1-2  2.6       2    0.6      1.0      1.6        0        0 #> 6 12   01   02   1   1 0.2 0.2   1     1-1   2   2     1-1  2.2       2    0.2      1.2      1.0        0        0 #> ... #>    id fid mid loc gen   w1  w2 sex loc.gen  pa1   pa2 loc.sex agv1 agv1_pa agv1_w agv1_1-1 agv1_1-2 agv1_2-1 agv1_2-2 #> 19 43  32  33   2   4 -0.1 0.1   2     2-4 2.15 2.700     2-2 2.05    2.15   -0.1   1.1750     1.25        0  -0.3750 #> 20 44  32  34   2   4  0.3 0.3   2     2-4 2.65 2.650     2-2 2.95    2.65    0.3   1.1750     1.25        0   0.5250 #> 21 51  42  41   1   5  0.8 0.8   2     1-5 4.05 4.050     1-2 4.85    4.05    0.8   1.7000     3.15        0   0.0000 #> 22 52  42  41   1   5  1.0 1.0   2     1-5 4.05 4.050     1-2 5.05    4.05    1.0   1.7000     3.35        0   0.0000 #> 23 53  42  43   2   5 -0.2 0.2   2     2-5 3.05 3.425     2-2 2.85    3.05   -0.2   1.6375     1.60        0  -0.3875 #> 24 54  42  44   2   5  0.3 0.3   2     2-5 3.50 3.500     2-2 3.80    3.50    0.3   1.6375     1.60        0   0.5625 #>  #>  Trait: agv2  #>  #>   id  fid  mid loc gen  w1  w2 sex loc.gen pa1 pa2 loc.sex agv2 agv2_pa agv2_w agv2_1-1 agv2_1-2 agv2_2-1 agv2_2-2 #> 1 01 <NA> <NA>   1   0 2.0 2.0   1     1-0   0   0     1-1  2.0       0    2.0      2.0      0.0        0        0 #> 2 02 <NA> <NA>   1   0 2.0 2.0   2     1-0   0   0     1-2  2.0       0    2.0      0.0      2.0        0        0 #> 3 03 <NA> <NA>   2   0 0.0 0.0   1     2-0   0   0     2-1  0.0       0    0.0      0.0      0.0        0        0 #> 4 04 <NA> <NA>   2   0 0.0 0.0   2     2-0   0   0     2-2  0.0       0    0.0      0.0      0.0        0        0 #> 5 11   01   02   1   1 0.6 0.6   2     1-1   2   2     1-2  2.6       2    0.6      1.0      1.6        0        0 #> 6 12   01   02   1   1 0.2 0.2   1     1-1   2   2     1-1  2.2       2    0.2      1.2      1.0        0        0 #> ... #>    id fid mid loc gen   w1  w2 sex loc.gen  pa1   pa2 loc.sex  agv2 agv2_pa agv2_w agv2_1-1 agv2_1-2 agv2_2-1 agv2_2-2 #> 19 43  32  33   2   4 -0.1 0.1   2     2-4 2.15 2.700     2-2 2.800   2.700    0.1   1.1750     1.25        0   0.3750 #> 20 44  32  34   2   4  0.3 0.3   2     2-4 2.65 2.650     2-2 2.950   2.650    0.3   1.1750     1.25        0   0.5250 #> 21 51  42  41   1   5  0.8 0.8   2     1-5 4.05 4.050     1-2 4.850   4.050    0.8   1.7000     3.15        0   0.0000 #> 22 52  42  41   1   5  1.0 1.0   2     1-5 4.05 4.050     1-2 5.050   4.050    1.0   1.7000     3.35        0   0.0000 #> 23 53  42  43   2   5 -0.2 0.2   2     2-5 3.05 3.425     2-2 3.625   3.425    0.2   1.6375     1.60        0   0.3875 #> 24 54  42  44   2   5  0.3 0.3   2     2-5 3.50 3.500     2-2 3.800   3.500    0.3   1.6375     1.60        0   0.5625 #>  #>  #> > ## Summarize and plot by generation (=trend) #> > (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   gen N    Sum     1-1   1-2 2-1      2-2 #> 1   0 4 1.0000 0.50000 0.500   0  0.00000 #> 2   1 4 1.1000 0.55000 0.650   0 -0.10000 #> 3   2 4 1.9250 0.92500 1.050   0 -0.05000 #> 4   3 4 2.5500 1.15000 1.425   0 -0.02500 #> 5   4 4 3.2750 1.43750 1.800   0  0.03750 #> 6   5 4 4.1375 1.66875 2.425   0  0.04375 #>  #>  Trait: agv2  #>  #>   gen N     Sum     1-1   1-2 2-1    2-2 #> 1   0 4 1.00000 0.50000 0.500   0 0.0000 #> 2   1 4 1.40000 0.55000 0.650   0 0.2000 #> 3   2 4 2.17500 0.92500 1.050   0 0.2000 #> 4   3 4 2.82500 1.15000 1.425   0 0.2500 #> 5   4 4 3.46250 1.43750 1.800   0 0.2250 #> 6   5 4 4.33125 1.66875 2.425   0 0.2375 #>  #>  #> > plot(ret)   #>  #> > plot(ret, lineTypeList=list(\"-1\"=1, \"-2\"=2, def=3))   #>  #> > ## Summarize and plot location specific trends #> > (ret <- summary(res, by=\"loc.gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>    loc.gen N    Sum    1-1  1-2 2-1     2-2 #> 1      1-0 2  2.000 1.0000 1.00   0  0.0000 #> 2      1-1 2  2.400 1.1000 1.30   0  0.0000 #> 3      1-2 2  2.850 1.2500 1.60   0  0.0000 #> 4      1-3 2  3.250 1.3000 1.95   0  0.0000 #> 5      1-4 2  4.050 1.7000 2.35   0  0.0000 #> 6      1-5 2  4.950 1.7000 3.25   0  0.0000 #> 7      2-0 2  0.000 0.0000 0.00   0  0.0000 #> 8      2-1 2 -0.200 0.0000 0.00   0 -0.2000 #> 9      2-2 2  1.000 0.6000 0.50   0 -0.1000 #> 10     2-3 2  1.850 1.0000 0.90   0 -0.0500 #> 11     2-4 2  2.500 1.1750 1.25   0  0.0750 #> 12     2-5 2  3.325 1.6375 1.60   0  0.0875 #>  #>  Trait: agv2  #>  #>    loc.gen N    Sum    1-1  1-2 2-1   2-2 #> 1      1-0 2 2.0000 1.0000 1.00   0 0.000 #> 2      1-1 2 2.4000 1.1000 1.30   0 0.000 #> 3      1-2 2 2.8500 1.2500 1.60   0 0.000 #> 4      1-3 2 3.2500 1.3000 1.95   0 0.000 #> 5      1-4 2 4.0500 1.7000 2.35   0 0.000 #> 6      1-5 2 4.9500 1.7000 3.25   0 0.000 #> 7      2-0 2 0.0000 0.0000 0.00   0 0.000 #> 8      2-1 2 0.4000 0.0000 0.00   0 0.400 #> 9      2-2 2 1.5000 0.6000 0.50   0 0.400 #> 10     2-3 2 2.4000 1.0000 0.90   0 0.500 #> 11     2-4 2 2.8750 1.1750 1.25   0 0.450 #> 12     2-5 2 3.7125 1.6375 1.60   0 0.475 #>  #>  #> > plot(ret, lineTypeList=list(\"-1\"=1, \"-2\"=2, def=3))   #>  #> > ## Summarize and plot location specific trends but only for location 1 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 1)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N  Sum  1-1  1-2 2-1 2-2 #> 1     1-0 2 2.00 1.00 1.00   0   0 #> 2     1-1 2 2.40 1.10 1.30   0   0 #> 3     1-2 2 2.85 1.25 1.60   0   0 #> 4     1-3 2 3.25 1.30 1.95   0   0 #> 5     1-4 2 4.05 1.70 2.35   0   0 #> 6     1-5 2 4.95 1.70 3.25   0   0 #>  #>  Trait: agv2  #>  #>   loc.gen N  Sum  1-1  1-2 2-1 2-2 #> 1     1-0 2 2.00 1.00 1.00   0   0 #> 2     1-1 2 2.40 1.10 1.30   0   0 #> 3     1-2 2 2.85 1.25 1.60   0   0 #> 4     1-3 2 3.25 1.30 1.95   0   0 #> 5     1-4 2 4.05 1.70 2.35   0   0 #> 6     1-5 2 4.95 1.70 3.25   0   0 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 2 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 2)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N    Sum    1-1  1-2 2-1     2-2 #> 1     2-0 2  0.000 0.0000 0.00   0  0.0000 #> 2     2-1 2 -0.200 0.0000 0.00   0 -0.2000 #> 3     2-2 2  1.000 0.6000 0.50   0 -0.1000 #> 4     2-3 2  1.850 1.0000 0.90   0 -0.0500 #> 5     2-4 2  2.500 1.1750 1.25   0  0.0750 #> 6     2-5 2  3.325 1.6375 1.60   0  0.0875 #>  #>  Trait: agv2  #>  #>   loc.gen N    Sum    1-1  1-2 2-1   2-2 #> 1     2-0 2 0.0000 0.0000 0.00   0 0.000 #> 2     2-1 2 0.4000 0.0000 0.00   0 0.400 #> 3     2-2 2 1.5000 0.6000 0.50   0 0.400 #> 4     2-3 2 2.4000 1.0000 0.90   0 0.500 #> 5     2-4 2 2.8750 1.1750 1.25   0 0.450 #> 6     2-5 2 3.7125 1.6375 1.60   0 0.475 #>  #>  #> > plot(ret)   #>  #> > ###----------------------------------------------------------------------------- #> > ### AlphaPart_deterministic.R ends here   demo(topic=\"AlphaPart_stochastic\",     package=\"AlphaPart\",        ask=interactive()) #>  #>  #> \tdemo(AlphaPart_stochastic) #> \t---- ~~~~~~~~~~~~~~~~~~~~ #>  #> > ### demo_stohastic.R #> > ###----------------------------------------------------------------------------- #> > ### $Id$ #> > ###----------------------------------------------------------------------------- #> >  #> > ### DESCRIPTION OF A DEMONSTRATION #> > ###----------------------------------------------------------------------------- #> >  #> > ## A demonstration with a simple example to see in action the partitioning of #> > ## additive genetic values by paths (Garcia-Cortes et al., 2008; Animal) #> > ##        #> > ## STOHASTIC SIMULATION (sort of) #> > ## #> > ## We have two locations (1 and 2). The first location has individualss with higher #> > ## additive genetic value. Males from the first location are imported males to the #> > ## second location from generation 2/3. This clearly leads to genetic gain in the #> > ## second location. However, the second location can also perform their own selection #> > ## so the question is how much genetic gain is due to the import of genes from the #> > ## first location and due to their own selection. #> > ## #> > ## Above scenario will be tested with a simple example of a pedigree bellow. Two #> > ## scenarios will be evaluated: without or with own selection in the second location. #> > ## Selection will always be present in the first location. #> > ## #> > ## Additive genetic values are provided, i.e., no inference is being done! #> > ## #> > ## The idea of this example is not to do extensive simulations, but just to have #> > ## a simple example to see how the partitioning of additive genetic values works. #> >  #> > ### SETUP #> > ###----------------------------------------------------------------------------- #> >  #> > options(width=200) #>  #> > ## install.packages(pkg=c(\"truncnorm\"), dep=TRUE) #> > library(package=\"truncnorm\") #>  #> > ### EXAMPLE PEDIGREE #> > ###----------------------------------------------------------------------------- #> >  #> > ## Generation 0 #> >  id0 <- c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\") #>  #> > fid0 <- mid0 <- rep(NA, times=length(id0)) #>  #> >   h0 <- rep(c(1, 2), each=4) #>  #> >   g0 <- rep(0, times=length(id0)) #>  #> > ## Generation 1 #> >  id1 <- c(\"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\") #>  #> > fid1 <- c(\"02\", \"02\", \"02\", \"02\", \"06\", \"06\", \"06\", \"06\") #>  #> > mid1 <- c(\"01\", \"01\", \"03\", \"04\", \"05\", \"05\", \"07\", \"08\") #>  #> >   h1 <- h0 #>  #> >   g1 <- rep(1, times=length(id1)) #>  #> > ## Generation 2 #> >  id2 <- c(\"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\") #>  #> > fid2 <- c(\"13\", \"13\", \"13\", \"13\", \"13\", \"13\", \"13\", \"13\") #>  #> > mid2 <- c(\"11\", \"12\", \"14\", \"14\", \"15\", \"16\", \"17\", \"18\") #>  #> >   h2 <- h0 #>  #> >   g2 <- rep(2, times=length(id2)) #>  #> > ## Generation 3 #> >  id3 <- c(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\") #>  #> > fid3 <- c(\"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\") #>  #> > mid3 <- c(\"21\", \"21\", \"22\", \"23\", \"25\", \"26\", \"27\", \"28\") #>  #> >   h3 <- h0 #>  #> >   g3 <- rep(3, times=length(id3)) #>  #> > ## Generation 4 #> >  id4 <- c(\"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\") #>  #> > fid4 <- c(\"34\", \"34\", \"34\", \"34\", \"34\", \"34\", \"34\", \"34\") #>  #> > mid4 <- c(\"31\", \"32\", \"32\", \"33\", \"35\", \"36\", \"37\", \"38\") #>  #> >   h4 <- h0 #>  #> >   g4 <- rep(4, times=length(id4)) #>  #> > ## Generation 5 #> >  id5 <- c(\"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\") #>  #> > fid5 <- c(\"44\", \"44\", \"44\", \"44\", \"44\", \"44\", \"44\", \"44\") #>  #> > mid5 <- c(\"41\", \"42\", \"43\", \"43\", \"45\", \"46\", \"47\", \"48\") #>  #> >   h5 <- h0 #>  #> >   g5 <- rep(5, times=length(id4)) #>  #> > ped <- data.frame( id=c( id0,  id1,  id2,  id3,  id4,  id5), #> +                   fid=c(fid0, fid1, fid2, fid3, fid4, fid5), #> +                   mid=c(mid0, mid1, mid2, mid3, mid4, mid5), #> +                   loc=c(  h0,   h1,   h2,   h3,   h4,   h5), #> +                   gen=c(  g0,   g1,   g2,   g3,   g4,   g5)) #>  #> > ped$sex <- 2 #>  #> > ped[ped$id %in% ped$fid, \"sex\"] <- 1 #>  #> > ped$loc.gen <- with(ped, paste(loc, gen, sep=\"-\")) #>  #> > ### SIMULATE ADDITIVE GENETIC VALUES - STOHASTIC #> > ###----------------------------------------------------------------------------- #> >  #> > ## --- Parameters of simulation --- #> >  #> > ## Additive genetic mean in founders by location #> > mu1 <- 2 #>  #> > mu2 <- 0 #>  #> > ## Additive genetic variance in population #> > sigma2 <- 1 #>  #> > sigma  <- sqrt(sigma2) #>  #> > ## Threshold value for Mendelian sampling for selection - only values above this #> > ##  will be accepted in simulation #> > t <- 0 #>  #> > ## Set seed for simulation #> > set.seed(seed=19791123) #>  #> > ## --- Start of simulation --- #> >  #> > ped$agv1 <- NA ## Scenario (trait) 1: No selection in the second location #>  #> > ped$agv2 <- NA ## Scenario (trait) 2:    Selection in the second location #>  #> > ## Generation 0  - founders (for simplicity set their values to the mean of location) #> > ped[ped$gen == 0 & ped$loc == 1, c(\"agv1\", \"agv2\")] <- mu1 #>  #> > ped[ped$gen == 0 & ped$loc == 2, c(\"agv1\", \"agv2\")] <- mu2 #>  #> > ## Generation 1+ - non-founders #> > for(i in (length(g0)+1):nrow(ped)) { #> +   ## Scenario (trait) 1: selection only in the first location #> +   if(ped[i, \"loc\"] == 1) { #> +     w <- rtruncnorm(n=1, mean=0, sd=sqrt(sigma2/2), a=t) #> +   } else { #> +     w <-      rnorm(n=1, mean=0, sd=sqrt(sigma2/2)) #> +   } #> +   ped[i, \"agv1\"] <- round(0.5 * ped[ped$id %in% ped[i, \"fid\"], \"agv1\"] + #> +                           0.5 * ped[ped$id %in% ped[i, \"mid\"], \"agv1\"] + #> +                           w, digits=1) #> +   ## Scenario (trait) 2: selection in both locations #> +   if(ped[i, \"loc\"] == 2) { #> +     w <- rtruncnorm(n=1, mean=0, sd=sqrt(sigma2/2), a=t) #> +   } ## for location 1 take the same values as above #> +   ped[i, \"agv2\"] <- round(0.5 * ped[ped$id %in% ped[i, \"fid\"], \"agv2\"] + #> +                           0.5 * ped[ped$id %in% ped[i, \"mid\"], \"agv2\"] + #> +                           w, digits=1) #> + } #>  #> > ### PLOT INDIVIDUAL ADDITIVE GENETIC VALUES #> > ###----------------------------------------------------------------------------- #> >  #> > par(mfrow=c(2, 1), bty=\"l\", pty=\"m\", mar=c(2, 2, 1, 1) + .1, mgp=c(0.7, 0.2, 0)) #>  #> > tmp <- ped$gen + c(-1.5, -0.5, 0.5, 1.5) * 0.1 #>  #> > with(ped, plot(agv1 ~ tmp, pch=c(19, 21)[ped$loc], ylab=\"Additive genetic value\", #> +                xlab=\"Generation\", main=\"Selection in location 1\", axes=FALSE, #> +                ylim=range(c(agv1, agv2)))) #>  #> > axis(1, labels=FALSE, tick=FALSE); axis(2, labels=FALSE, tick=FALSE); box() #>  #> > legend(x=\"topleft\", legend=c(1, 2), title=\"Location\", pch=c(19, 21), bty=\"n\") #>  #> > with(ped, plot(agv2 ~ tmp, pch=c(19, 21)[ped$loc], ylab=\"Additive genetic value\", #> +                xlab=\"Generation\", main=\"Selection in locations 1 and 2\", axes=FALSE, #> +                ylim=range(c(agv1, agv2))))  #>  #> > axis(1, labels=FALSE, tick=FALSE); axis(2, labels=FALSE, tick=FALSE); box() #>  #> > legend(x=\"topleft\", legend=c(1, 2), title=\"Location\", pch=c(19, 21), bty=\"n\") #>  #> > ### PARTITION ADDITIVE GENETIC VALUES BY ... #> > ###----------------------------------------------------------------------------- #> >  #> > ## Compute partitions by location #> > (res <- AlphaPart(x=ped, colPath=\"loc\", colBV=c(\"agv1\", \"agv2\"))) #>  #> Size: #>  - individuals: 48  #>  - traits: 2 (agv1, agv2) #>  - paths: 2 (1, 2) #>  - unknown (missing) values: #> agv1 agv2  #>    0    0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 48  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   id  fid  mid loc gen sex loc.gen agv1 agv1_pa agv1_w agv1_1 agv1_2 #> 1 01 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 2 02 <NA> <NA>   1   0   1     1-0    2       1      1      2      0 #> 3 03 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 4 04 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 5 05 <NA> <NA>   2   0   2     2-0    0       1     -1      0      0 #> 6 06 <NA> <NA>   2   0   1     2-0    0       1     -1      0      0 #> ... #>    id fid mid loc gen sex loc.gen agv1 agv1_pa agv1_w agv1_1 agv1_2 #> 43 53  44  43   1   5   2     1-5  5.3    4.15   1.15   5.30   0.00 #> 44 54  44  43   1   5   2     1-5  4.2    4.15   0.05   4.20   0.00 #> 45 55  44  45   2   5   2     2-5  4.1    3.15   0.95   3.35   0.75 #> 46 56  44  46   2   5   2     2-5  2.7    3.20  -0.50   3.35  -0.65 #> 47 57  44  47   2   5   2     2-5  3.5    3.20   0.30   3.35   0.15 #> 48 58  44  48   2   5   2     2-5  3.8    4.35  -0.55   3.35   0.45 #>  #>  Trait: agv2  #>  #>   id  fid  mid loc gen sex loc.gen agv2 agv2_pa agv2_w agv2_1 agv2_2 #> 1 01 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 2 02 <NA> <NA>   1   0   1     1-0    2       1      1      2      0 #> 3 03 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 4 04 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 5 05 <NA> <NA>   2   0   2     2-0    0       1     -1      0      0 #> 6 06 <NA> <NA>   2   0   1     2-0    0       1     -1      0      0 #> ... #>    id fid mid loc gen sex loc.gen agv2 agv2_pa agv2_w agv2_1 agv2_2 #> 43 53  44  43   1   5   2     1-5  5.3    4.15   1.15   5.30   0.00 #> 44 54  44  43   1   5   2     1-5  4.2    4.15   0.05   4.20   0.00 #> 45 55  44  45   2   5   2     2-5  3.7    3.65   0.05   3.35   0.35 #> 46 56  44  46   2   5   2     2-5  5.2    4.00   1.20   3.35   1.85 #> 47 57  44  47   2   5   2     2-5  4.1    3.90   0.20   3.35   0.75 #> 48 58  44  48   2   5   2     2-5  4.3    3.60   0.70   3.35   0.95 #>  #>  #> > ## Summarize whole population #> > (ret <- summary(res)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   N NA      Sum        1     2 #> 1 1 48 2.466667 2.391667 0.075 #>  #>  Trait: agv2  #>  #>   N NA      Sum        1         2 #> 1 1 48 2.820833 2.391667 0.4291667 #>  #>  #> > ## Summarize and plot by generation (=trend) #> > (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   gen N    Sum      1       2 #> 1   0 8 1.0000 1.0000  0.0000 #> 2   1 8 1.4875 1.2125  0.2750 #> 3   2 8 1.8875 2.0500 -0.1625 #> 4   3 8 2.7500 2.6250  0.1250 #> 5   4 8 3.6125 3.4875  0.1250 #> 6   5 8 4.0625 3.9750  0.0875 #>  #>  Trait: agv2  #>  #>   gen N    Sum      1      2 #> 1   0 8 1.0000 1.0000 0.0000 #> 2   1 8 1.5500 1.2125 0.3375 #> 3   2 8 2.7125 2.0500 0.6625 #> 4   3 8 3.2750 2.6250 0.6500 #> 5   4 8 3.9250 3.4875 0.4375 #> 6   5 8 4.4625 3.9750 0.4875 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends #> > (ret <- summary(res, by=\"loc.gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>    loc.gen N   Sum     1      2 #> 1      1-0 4 2.000 2.000  0.000 #> 2      1-1 4 2.425 2.425  0.000 #> 3      1-2 4 2.700 2.700  0.000 #> 4      1-3 4 3.250 3.250  0.000 #> 5      1-4 4 4.275 4.275  0.000 #> 6      1-5 4 4.600 4.600  0.000 #> 7      2-0 4 0.000 0.000  0.000 #> 8      2-1 4 0.550 0.000  0.550 #> 9      2-2 4 1.075 1.400 -0.325 #> 10     2-3 4 2.250 2.000  0.250 #> 11     2-4 4 2.950 2.700  0.250 #> 12     2-5 4 3.525 3.350  0.175 #>  #>  Trait: agv2  #>  #>    loc.gen N   Sum     1     2 #> 1      1-0 4 2.000 2.000 0.000 #> 2      1-1 4 2.425 2.425 0.000 #> 3      1-2 4 2.700 2.700 0.000 #> 4      1-3 4 3.250 3.250 0.000 #> 5      1-4 4 4.275 4.275 0.000 #> 6      1-5 4 4.600 4.600 0.000 #> 7      2-0 4 0.000 0.000 0.000 #> 8      2-1 4 0.675 0.000 0.675 #> 9      2-2 4 2.725 1.400 1.325 #> 10     2-3 4 3.300 2.000 1.300 #> 11     2-4 4 3.575 2.700 0.875 #> 12     2-5 4 4.325 3.350 0.975 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 1 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 1)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N   Sum     1 2 #> 1     1-0 4 2.000 2.000 0 #> 2     1-1 4 2.425 2.425 0 #> 3     1-2 4 2.700 2.700 0 #> 4     1-3 4 3.250 3.250 0 #> 5     1-4 4 4.275 4.275 0 #> 6     1-5 4 4.600 4.600 0 #>  #>  Trait: agv2  #>  #>   loc.gen N   Sum     1 2 #> 1     1-0 4 2.000 2.000 0 #> 2     1-1 4 2.425 2.425 0 #> 3     1-2 4 2.700 2.700 0 #> 4     1-3 4 3.250 3.250 0 #> 5     1-4 4 4.275 4.275 0 #> 6     1-5 4 4.600 4.600 0 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 2 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 2)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N   Sum    1      2 #> 1     2-0 4 0.000 0.00  0.000 #> 2     2-1 4 0.550 0.00  0.550 #> 3     2-2 4 1.075 1.40 -0.325 #> 4     2-3 4 2.250 2.00  0.250 #> 5     2-4 4 2.950 2.70  0.250 #> 6     2-5 4 3.525 3.35  0.175 #>  #>  Trait: agv2  #>  #>   loc.gen N   Sum    1     2 #> 1     2-0 4 0.000 0.00 0.000 #> 2     2-1 4 0.675 0.00 0.675 #> 3     2-2 4 2.725 1.40 1.325 #> 4     2-3 4 3.300 2.00 1.300 #> 5     2-4 4 3.575 2.70 0.875 #> 6     2-5 4 4.325 3.35 0.975 #>  #>  #> > plot(ret)   #>  #> > ## Compute partitions by location and sex #> > ped$loc.sex <- with(ped, paste(loc, sex, sep=\"-\")) #>  #> > (res <- AlphaPart(x=ped, colPath=\"loc.sex\", colBV=c(\"agv1\", \"agv2\"))) #>  #> Size: #>  - individuals: 48  #>  - traits: 2 (agv1, agv2) #>  - paths: 4 (1-1, 1-2, 2-1, 2-2) #>  - unknown (missing) values: #> agv1 agv2  #>    0    0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 48  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   id  fid  mid loc gen sex loc.gen loc.sex agv1 agv1_pa agv1_w agv1_1-1 agv1_1-2 agv1_2-1 agv1_2-2 #> 1 01 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 2 02 <NA> <NA>   1   0   1     1-0     1-1    2       1      1        2        0        0        0 #> 3 03 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 4 04 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 5 05 <NA> <NA>   2   0   2     2-0     2-2    0       1     -1        0        0        0        0 #> 6 06 <NA> <NA>   2   0   1     2-0     2-1    0       1     -1        0        0        0        0 #> ... #>    id fid mid loc gen sex loc.gen loc.sex agv1 agv1_pa agv1_w agv1_1-1 agv1_1-2 agv1_2-1 agv1_2-2 #> 43 53  44  43   1   5   2     1-5     1-2  5.3    4.15   1.15   2.3250   2.9750        0     0.00 #> 44 54  44  43   1   5   2     1-5     1-2  4.2    4.15   0.05   2.3250   1.8750        0     0.00 #> 45 55  44  45   2   5   2     2-5     2-2  4.1    3.15   0.95   2.2625   1.0875        0     0.75 #> 46 56  44  46   2   5   2     2-5     2-2  2.7    3.20  -0.50   2.2625   1.0875        0    -0.65 #> 47 57  44  47   2   5   2     2-5     2-2  3.5    3.20   0.30   2.2625   1.0875        0     0.15 #> 48 58  44  48   2   5   2     2-5     2-2  3.8    4.35  -0.55   2.2625   1.0875        0     0.45 #>  #>  Trait: agv2  #>  #>   id  fid  mid loc gen sex loc.gen loc.sex agv2 agv2_pa agv2_w agv2_1-1 agv2_1-2 agv2_2-1 agv2_2-2 #> 1 01 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 2 02 <NA> <NA>   1   0   1     1-0     1-1    2       1      1        2        0        0        0 #> 3 03 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 4 04 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 5 05 <NA> <NA>   2   0   2     2-0     2-2    0       1     -1        0        0        0        0 #> 6 06 <NA> <NA>   2   0   1     2-0     2-1    0       1     -1        0        0        0        0 #> ... #>    id fid mid loc gen sex loc.gen loc.sex agv2 agv2_pa agv2_w agv2_1-1 agv2_1-2 agv2_2-1 agv2_2-2 #> 43 53  44  43   1   5   2     1-5     1-2  5.3    4.15   1.15   2.3250   2.9750        0     0.00 #> 44 54  44  43   1   5   2     1-5     1-2  4.2    4.15   0.05   2.3250   1.8750        0     0.00 #> 45 55  44  45   2   5   2     2-5     2-2  3.7    3.65   0.05   2.2625   1.0875        0     0.35 #> 46 56  44  46   2   5   2     2-5     2-2  5.2    4.00   1.20   2.2625   1.0875        0     1.85 #> 47 57  44  47   2   5   2     2-5     2-2  4.1    3.90   0.20   2.2625   1.0875        0     0.75 #> 48 58  44  48   2   5   2     2-5     2-2  4.3    3.60   0.70   2.2625   1.0875        0     0.95 #>  #>  #> > ## Summarize and plot by generation (=trend) #> > (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   gen N    Sum     1-1     1-2 2-1     2-2 #> 1   0 8 1.0000 0.25000 0.75000   0  0.0000 #> 2   1 8 1.4875 0.60000 0.61250   0  0.2750 #> 3   2 8 1.8875 1.16875 0.88125   0 -0.1625 #> 4   3 8 2.7500 1.45000 1.17500   0  0.1250 #> 5   4 8 3.6125 1.92500 1.56250   0  0.1250 #> 6   5 8 4.0625 2.29375 1.68125   0  0.0875 #>  #>  Trait: agv2  #>  #>   gen N    Sum     1-1     1-2 2-1    2-2 #> 1   0 8 1.0000 0.25000 0.75000   0 0.0000 #> 2   1 8 1.5500 0.60000 0.61250   0 0.3375 #> 3   2 8 2.7125 1.16875 0.88125   0 0.6625 #> 4   3 8 3.2750 1.45000 1.17500   0 0.6500 #> 5   4 8 3.9250 1.92500 1.56250   0 0.4375 #> 6   5 8 4.4625 2.29375 1.68125   0 0.4875 #>  #>  #> > plot(ret)   #>  #> > plot(ret, lineTypeList=list(\"-1\"=1, \"-2\"=2, def=3))   #>  #> > ## Summarize and plot location specific trends #> > (ret <- summary(res, by=\"loc.gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>    loc.gen N   Sum    1-1    1-2 2-1    2-2 #> 1      1-0 4 2.000 0.5000 1.5000   0  0.000 #> 2      1-1 4 2.425 1.2000 1.2250   0  0.000 #> 3      1-2 4 2.700 1.4375 1.2625   0  0.000 #> 4      1-3 4 3.250 1.6750 1.5750   0  0.000 #> 5      1-4 4 4.275 2.1000 2.1750   0  0.000 #> 6      1-5 4 4.600 2.3250 2.2750   0  0.000 #> 7      2-0 4 0.000 0.0000 0.0000   0  0.000 #> 8      2-1 4 0.550 0.0000 0.0000   0  0.550 #> 9      2-2 4 1.075 0.9000 0.5000   0 -0.325 #> 10     2-3 4 2.250 1.2250 0.7750   0  0.250 #> 11     2-4 4 2.950 1.7500 0.9500   0  0.250 #> 12     2-5 4 3.525 2.2625 1.0875   0  0.175 #>  #>  Trait: agv2  #>  #>    loc.gen N   Sum    1-1    1-2 2-1   2-2 #> 1      1-0 4 2.000 0.5000 1.5000   0 0.000 #> 2      1-1 4 2.425 1.2000 1.2250   0 0.000 #> 3      1-2 4 2.700 1.4375 1.2625   0 0.000 #> 4      1-3 4 3.250 1.6750 1.5750   0 0.000 #> 5      1-4 4 4.275 2.1000 2.1750   0 0.000 #> 6      1-5 4 4.600 2.3250 2.2750   0 0.000 #> 7      2-0 4 0.000 0.0000 0.0000   0 0.000 #> 8      2-1 4 0.675 0.0000 0.0000   0 0.675 #> 9      2-2 4 2.725 0.9000 0.5000   0 1.325 #> 10     2-3 4 3.300 1.2250 0.7750   0 1.300 #> 11     2-4 4 3.575 1.7500 0.9500   0 0.875 #> 12     2-5 4 4.325 2.2625 1.0875   0 0.975 #>  #>  #> > plot(ret, lineTypeList=list(\"-1\"=1, \"-2\"=2, def=3))   #>  #> > ## Summarize and plot location specific trends but only for location 1 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 1)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N   Sum    1-1    1-2 2-1 2-2 #> 1     1-0 4 2.000 0.5000 1.5000   0   0 #> 2     1-1 4 2.425 1.2000 1.2250   0   0 #> 3     1-2 4 2.700 1.4375 1.2625   0   0 #> 4     1-3 4 3.250 1.6750 1.5750   0   0 #> 5     1-4 4 4.275 2.1000 2.1750   0   0 #> 6     1-5 4 4.600 2.3250 2.2750   0   0 #>  #>  Trait: agv2  #>  #>   loc.gen N   Sum    1-1    1-2 2-1 2-2 #> 1     1-0 4 2.000 0.5000 1.5000   0   0 #> 2     1-1 4 2.425 1.2000 1.2250   0   0 #> 3     1-2 4 2.700 1.4375 1.2625   0   0 #> 4     1-3 4 3.250 1.6750 1.5750   0   0 #> 5     1-4 4 4.275 2.1000 2.1750   0   0 #> 6     1-5 4 4.600 2.3250 2.2750   0   0 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 2 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 2)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N   Sum    1-1    1-2 2-1    2-2 #> 1     2-0 4 0.000 0.0000 0.0000   0  0.000 #> 2     2-1 4 0.550 0.0000 0.0000   0  0.550 #> 3     2-2 4 1.075 0.9000 0.5000   0 -0.325 #> 4     2-3 4 2.250 1.2250 0.7750   0  0.250 #> 5     2-4 4 2.950 1.7500 0.9500   0  0.250 #> 6     2-5 4 3.525 2.2625 1.0875   0  0.175 #>  #>  Trait: agv2  #>  #>   loc.gen N   Sum    1-1    1-2 2-1   2-2 #> 1     2-0 4 0.000 0.0000 0.0000   0 0.000 #> 2     2-1 4 0.675 0.0000 0.0000   0 0.675 #> 3     2-2 4 2.725 0.9000 0.5000   0 1.325 #> 4     2-3 4 3.300 1.2250 0.7750   0 1.300 #> 5     2-4 4 3.575 1.7500 0.9500   0 0.875 #> 6     2-5 4 4.325 2.2625 1.0875   0 0.975 #>  #>  #> > plot(ret)   #>  #> > ###----------------------------------------------------------------------------- #> > ### demo_stohastic.R ends here # }"},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.ped.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample pedigree for partition. — AlphaPart.ped","title":"Sample pedigree for partition. — AlphaPart.ped","text":"dataset containing pedigree information breeding values six individuals.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.ped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample pedigree for partition. — AlphaPart.ped","text":"","code":"AlphaPart.ped"},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.ped.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample pedigree for partition. — AlphaPart.ped","text":"data frame 6 rows 8 variables: IId individual's ID FId Father's ID MId Mother's ID gen Generation country Country gender Individual's sex bv1 Breeding value trait 1 bv2 Breeding value trait 1","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPart.ped.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample pedigree for partition. — AlphaPart.ped","text":"Simulation.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSubset.html","id":null,"dir":"Reference","previous_headings":"","what":"AlphaPartSubset.R — AlphaPartSubset","title":"AlphaPartSubset.R — AlphaPartSubset","text":"function choose partition paths keep.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSubset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AlphaPartSubset.R — AlphaPartSubset","text":"","code":"AlphaPartSubset(x, paths = NULL)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSubset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AlphaPartSubset.R — AlphaPartSubset","text":"x AlphaPart summaryAlphaPart, object AlphaPart(...) summary(AlphaPart(...), ...) call. paths Character, names paths kept.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSubset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AlphaPartSubset.R — AlphaPartSubset","text":"object class AlphaPart summaryAlphaPart paths. Meta information slot \"info\" modified well.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSubset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AlphaPartSubset.R — AlphaPartSubset","text":"Displaying results partitions many paths often confusing. function helps selecting paths interest. Unspecified paths removed input object x. Meta information modified accordingly. Default setting nothing.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSubset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AlphaPartSubset.R — AlphaPartSubset","text":"","code":"## Small pedigree with additive genetic (=breeding) values ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),                   fid=c(  0,   0,   2,   0,   4,   0),                   mid=c(  0,   0,   1,   0,   3,   3),                   loc=c(\"A\", \"B\", \"A\", \"B\", \"A\", \"A\"),                   gen=c(  1,   1,   2,   2,   3,   3),                  trt1=c(100, 120, 115, 130, 125, 125),                  trt2=c(100, 110, 105, 100,  85, 110))  ## Partition additive genetic values (tmp <- AlphaPart(x=ped, colBV=c(\"trt1\", \"trt2\"))) #>  #> Size: #>  - individuals: 6  #>  - traits: 2 (trt1, trt2) #>  - paths: 2 (A, B) #>  - unknown (missing) values: #> trt1 trt2  #>    0    0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 6  #>    - paths: 2 (A, B) #>    - traits: 2 (trt1, trt2) #>  #>  Trait: trt1  #>  #>   id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A trt1_B #> 1  1   0   0   A   1  100 116.6667 -16.666667    100      0 #> 2  2   0   0   B   1  120 116.6667   3.333333      0    120 #> 3  3   2   1   A   2  115 110.0000   5.000000     55     60 #> 4  4   0   0   B   2  130 116.6667  13.333333      0    130 #> 5  5   4   3   A   3  125 122.5000   2.500000     30     95 #> 6  6   0   3   A   3  125  57.5000  67.500000     95     30 #>  #>  Trait: trt2  #>  #>   id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A trt2_B #> 1  1   0   0   A   1  100 103.3333  -3.333333  100.0    0.0 #> 2  2   0   0   B   1  110 103.3333   6.666667    0.0  110.0 #> 3  3   2   1   A   2  105 105.0000   0.000000   50.0   55.0 #> 4  4   0   0   B   2  100 103.3333  -3.333333    0.0  100.0 #> 5  5   4   3   A   3   85 102.5000 -17.500000    7.5   77.5 #> 6  6   0   3   A   3  110  52.5000  57.500000   82.5   27.5 #>   ## Keep some partitions (working on object of class AlphaPart) (tmp2 <- AlphaPartSubset(x=tmp, paths=\"A\")) #>  #>  #>  Partitions of breeding values  #>    - individuals: 6  #>    - paths: 1 (A) #>    - traits: 2 (trt1, trt2) #>    - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartPathSubset' #>  #>  Trait: trt1  #>  #>   id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A #> 1  1   0   0   A   1  100 116.6667 -16.666667    100 #> 2  2   0   0   B   1  120 116.6667   3.333333      0 #> 3  3   2   1   A   2  115 110.0000   5.000000     55 #> 4  4   0   0   B   2  130 116.6667  13.333333      0 #> 5  5   4   3   A   3  125 122.5000   2.500000     30 #> 6  6   0   3   A   3  125  57.5000  67.500000     95 #>  #>  Trait: trt2  #>  #>   id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A #> 1  1   0   0   A   1  100 103.3333  -3.333333  100.0 #> 2  2   0   0   B   1  110 103.3333   6.666667    0.0 #> 3  3   2   1   A   2  105 105.0000   0.000000   50.0 #> 4  4   0   0   B   2  100 103.3333  -3.333333    0.0 #> 5  5   4   3   A   3   85 102.5000 -17.500000    7.5 #> 6  6   0   3   A   3  110  52.5000  57.500000   82.5 #>   ## Summarize by generation (tmpS <- summary(tmp, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (A, B) #>    - traits: 2 (trt1, trt2) #>  #>  Trait: trt1  #>  #>   gen N   Sum    A    B #> 1   1 2 110.0 50.0 60.0 #> 2   2 2 122.5 27.5 95.0 #> 3   3 2 125.0 62.5 62.5 #>  #>  Trait: trt2  #>  #>   gen N   Sum  A    B #> 1   1 2 105.0 50 55.0 #> 2   2 2 102.5 25 77.5 #> 3   3 2  97.5 45 52.5 #>   ## Keep some partitions (working on object of class summaryAlphaPart) (tmpS2 <- AlphaPartSubset(x=tmpS, paths=\"A\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 1 (A) #>    - traits: 2 (trt1, trt2) #>    - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartPathSubset' #>  #>  Trait: trt1  #>  #>   gen N   Sum    A #> 1   1 2 110.0 50.0 #> 2   2 2 122.5 27.5 #> 3   3 2 125.0 62.5 #>  #>  Trait: trt2  #>  #>   gen N   Sum  A #> 1   1 2 105.0 50 #> 2   2 2 102.5 25 #> 3   3 2  97.5 45 #>   ## ... must be equal to (tmpS3 <- summary(tmp2, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 1 (A) #>    - traits: 2 (trt1, trt2) #>    - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartPathSubset' #>  #>  Trait: trt1  #>  #>   gen N   Sum    A #> 1   1 2 110.0 50.0 #> 2   2 2 122.5 27.5 #> 3   3 2 125.0 62.5 #>  #>  Trait: trt2  #>  #>   gen N   Sum  A #> 1   1 2 105.0 50 #> 2   2 2 102.5 25 #> 3   3 2  97.5 45 #>"},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSum.html","id":null,"dir":"Reference","previous_headings":"","what":"AlphaPartSum.R — AlphaPartSum","title":"AlphaPartSum.R — AlphaPartSum","text":"function sum partitions several paths.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AlphaPartSum.R — AlphaPartSum","text":"","code":"AlphaPartSum(   x,   map = NULL,   remove = TRUE,   zeroPath = TRUE,   call = \"AlphaPartSum\" )"},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AlphaPartSum.R — AlphaPartSum","text":"x summaryAlphaPart, object AlphaPart(...) summary(AlphaPart(...), ...) call. map List, map summing paths; see details examples. remove Logical, remove original paths . zeroPath Logical, set called path zero exist. call character, internal use AlphaPartSubset).","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AlphaPartSum.R — AlphaPartSum","text":"object class AlphaPart summaryAlphaPart modified partitions. Meta information slot \"info\" modified well.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AlphaPartSum.R — AlphaPartSum","text":"Sometimes partitions particular paths small want sum paths similarity. actions easy achive manually functions provides way consistently given object x. Arguments map must list vectors length least two. Vectors length one skipped. idea first element new existing path add remaining specified paths, say list(c(\"\", \"B\"), c(\"X\", \"X\", \"Y\"), c(\"Z\", \"X\")) imply = B, X = X + Y, Z = X = X + Y. Note X changed changed value used calculations. Specify different (new) names new targets want avoid . carefull remove=TRUE, default setting, partitions defined first (target/new) partition vector list removed, example list(c(\"\", \"B\"), c(\"X\", \"X\", \"Y\"), c(\"Z\", \"X\")) partitions B Y removed, X removed defined target/new partition.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/AlphaPartSum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AlphaPartSum.R — AlphaPartSum","text":"","code":"## Small pedigree with additive genetic (=breeding) values ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),                   fid=c(  0,   0,   2,   0,   4,   0),                   mid=c(  0,   0,   1,   0,   3,   3),                   loc=c(\"A\", \"B\", \"A\", \"B\", \"A\", \"A\"),                   gen=c(  1,   1,   2,   2,   3,   3),                  trt1=c(100, 120, 115, 130, 125, 125),                  trt2=c(100, 110, 105,  140,  85, 110))  ## Partition additive genetic values (tmp <- AlphaPart(x=ped, colBV=c(\"trt1\", \"trt2\"))) #>  #> Size: #>  - individuals: 6  #>  - traits: 2 (trt1, trt2) #>  - paths: 2 (A, B) #>  - unknown (missing) values: #> trt1 trt2  #>    0    0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 6  #>    - paths: 2 (A, B) #>    - traits: 2 (trt1, trt2) #>  #>  Trait: trt1  #>  #>   id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A trt1_B #> 1  1   0   0   A   1  100 116.6667 -16.666667    100      0 #> 2  2   0   0   B   1  120 116.6667   3.333333      0    120 #> 3  3   2   1   A   2  115 110.0000   5.000000     55     60 #> 4  4   0   0   B   2  130 116.6667  13.333333      0    130 #> 5  5   4   3   A   3  125 122.5000   2.500000     30     95 #> 6  6   0   3   A   3  125  57.5000  67.500000     95     30 #>  #>  Trait: trt2  #>  #>   id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A trt2_B #> 1  1   0   0   A   1  100 116.6667 -16.666667  100.0    0.0 #> 2  2   0   0   B   1  110 116.6667  -6.666667    0.0  110.0 #> 3  3   2   1   A   2  105 105.0000   0.000000   50.0   55.0 #> 4  4   0   0   B   2  140 116.6667  23.333333    0.0  140.0 #> 5  5   4   3   A   3   85 122.5000 -37.500000  -12.5   97.5 #> 6  6   0   3   A   3  110  52.5000  57.500000   82.5   27.5 #>   ## Sum some partitions (working on object of class AlphaPart) (tmp2 <- AlphaPartSum(x=tmp, map=list(c(\"X\", \"A\", \"B\"), c(\"A\", \"B\")))) #>  #>  #>  Partitions of breeding values  #>    - individuals: 6  #>    - paths: 2 (A, X) #>    - traits: 2 (trt1, trt2) #>    - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartSum' #>  #>  Trait: trt1  #>  #>   id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A trt1_X #> 1  1   0   0   A   1  100 116.6667 -16.666667      0    100 #> 2  2   0   0   B   1  120 116.6667   3.333333    120    120 #> 3  3   2   1   A   2  115 110.0000   5.000000     60    115 #> 4  4   0   0   B   2  130 116.6667  13.333333    130    130 #> 5  5   4   3   A   3  125 122.5000   2.500000     95    125 #> 6  6   0   3   A   3  125  57.5000  67.500000     30    125 #>  #>  Trait: trt2  #>  #>   id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A trt2_X #> 1  1   0   0   A   1  100 116.6667 -16.666667    0.0    100 #> 2  2   0   0   B   1  110 116.6667  -6.666667  110.0    110 #> 3  3   2   1   A   2  105 105.0000   0.000000   55.0    105 #> 4  4   0   0   B   2  140 116.6667  23.333333  140.0    140 #> 5  5   4   3   A   3   85 122.5000 -37.500000   97.5     85 #> 6  6   0   3   A   3  110  52.5000  57.500000   27.5    110 #>   ## Summarize by generation (tmpS <- summary(tmp, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (A, B) #>    - traits: 2 (trt1, trt2) #>  #>  Trait: trt1  #>  #>   gen N   Sum    A    B #> 1   1 2 110.0 50.0 60.0 #> 2   2 2 122.5 27.5 95.0 #> 3   3 2 125.0 62.5 62.5 #>  #>  Trait: trt2  #>  #>   gen N   Sum  A    B #> 1   1 2 105.0 50 55.0 #> 2   2 2 122.5 25 97.5 #> 3   3 2  97.5 35 62.5 #>   ## Sum some partitions (working on object of class summaryAlphaPart) (tmpS2 <- AlphaPartSum(x=tmpS, map=list(c(\"X\", \"A\", \"B\"), c(\"A\", \"B\")))) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (A, X) #>    - traits: 2 (trt1, trt2) #>    - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartSum' #>  #>  Trait: trt1  #>  #>   gen N   Sum    A     X #> 1   1 2 110.0 60.0 110.0 #> 2   2 2 122.5 95.0 122.5 #> 3   3 2 125.0 62.5 125.0 #>  #>  Trait: trt2  #>  #>   gen N   Sum    A     X #> 1   1 2 105.0 55.0 105.0 #> 2   2 2 122.5 97.5 122.5 #> 3   3 2  97.5 62.5  97.5 #>   ## ... must be equal to (tmpS3 <- summary(tmp2, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (A, X) #>    - traits: 2 (trt1, trt2) #>    - warning: Consistency of the overall sum of partitions might not be correct due to the previous use of 'AlphaPartSum' #>  #>  Trait: trt1  #>  #>   gen N   Sum    A     X #> 1   1 2 110.0 60.0 110.0 #> 2   2 2 122.5 95.0 122.5 #> 3   3 2 125.0 62.5 125.0 #>  #>  Trait: trt2  #>  #>   gen N   Sum    A     X #> 1   1 2 105.0 55.0 105.0 #> 2   2 2 122.5 97.5 122.5 #> 3   3 2  97.5 62.5  97.5 #>"},{"path":"https://alphagenes.github.io/AlphaPart/reference/UnknownFuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Change given unknown value to NA and vice versa. — UnknownFuns","title":"Change given unknown value to NA and vice versa. — UnknownFuns","text":"Unknown missing values (NA R) can represented various ways (0, 999, etc.) different programs. isUnknown, unknownToNA, NAToUnknown can help change unknown values NA vice versa.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/UnknownFuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change given unknown value to NA and vice versa. — UnknownFuns","text":"","code":"isUnknown(x, unknown=NA, ...)  unknownToNA(x, unknown, warning=FALSE, ...)  NAToUnknown(x, unknown, force=FALSE, call.=FALSE, ...)  # Default S3 method isUnknown(x, unknown, ...)  # S3 method for class 'POSIXlt' isUnknown(x, unknown, ...)  # S3 method for class 'list' isUnknown(x, unknown, ...)  # S3 method for class 'data.frame' isUnknown(x, unknown, ...)  # S3 method for class 'matrix' isUnknown(x, unknown, ...)  unknownToNA(x, unknown, warning = FALSE, ...)  # Default S3 method unknownToNA(x, unknown, warning, ...)  # S3 method for class 'factor' unknownToNA(x, unknown, warning, ...)  # S3 method for class 'list' unknownToNA(x, unknown, warning, ...)  # S3 method for class 'data.frame' unknownToNA(x, unknown, warning, ...)  NAToUnknown(x, unknown, force = FALSE, call. = FALSE, ...)  # Default S3 method NAToUnknown(x, unknown, force, call., ...)  # S3 method for class 'factor' NAToUnknown(x, unknown, force, call., ...)  # S3 method for class 'list' NAToUnknown(x, unknown, force, call., ...)  # S3 method for class 'data.frame' NAToUnknown(x, unknown, force, call., ...)  .unknownList(x, unknown)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/UnknownFuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change given unknown value to NA and vice versa. — UnknownFuns","text":"x generic, object unknown value(s) unknown generic, value used instead NA ... arguments pased methods (.character POSIXlt case isUnknown) warning logical, issue warning x already NA force logical, force apply already existing value x call. logical, look warning","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/UnknownFuns.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change given unknown value to NA and vice versa. — UnknownFuns","text":"Gregor Gorjanc","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/centerPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate parent average for base population. — centerPop","title":"Calculate parent average for base population. — centerPop","text":"internally called functions used calculate parent average base population.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/centerPop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate parent average for base population. — centerPop","text":"Thiago de Paula Oliveira","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/getScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Get scale information — getScale","title":"Get scale information — getScale","text":"internally called function","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/getScale.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get scale information — getScale","text":"Thiago de Paula Oliveira","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/mapLevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapping levels — mapLevels","title":"Mapping levels — mapLevels","text":"mapLevels produces map information levels /internal integer codes. can conveniently used store level mapping one needs work internal codes factor later transfrorm back factor working several factors levels therefore internal coding.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/mapLevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapping levels — mapLevels","text":"","code":"mapLevels(x, codes=TRUE, sort=TRUE, drop=FALSE, combine=FALSE, ...)  mapLevels(x) <- value  # Default S3 method mapLevels(x, codes, sort, drop, combine, ...)  # S3 method for class 'character' mapLevels(x, codes, sort, drop, combine, ...)  # S3 method for class 'factor' mapLevels(x, codes, sort, drop, combine, ...)  # S3 method for class 'list' mapLevels(x, codes, sort, drop, combine, ...)  # S3 method for class 'data.frame' mapLevels(x, codes, sort, drop, combine, ...)  .unlistLevelsMap(x, ind = FALSE)  # S3 method for class 'levelsMap' print(x, ...)  # S3 method for class 'listLevelsMap' print(x, ...)  # S3 method for class 'levelsMap' x[i]  # S3 method for class 'listLevelsMap' x[i]  is.levelsMap(x)  is.listLevelsMap(x)  .isCharacterMap(x)  as.levelsMap(x, check = TRUE, ...)  as.listLevelsMap(x, check = TRUE)  .checkLevelsMap(x, method)  .checkListLevelsMap(x, method)  # S3 method for class 'levelsMap' c(..., sort = TRUE, recursive = FALSE)  # S3 method for class 'listLevelsMap' c(..., sort = TRUE, recursive = FALSE)  # S3 method for class 'levelsMap' sort(x, decreasing = FALSE, na.last = TRUE, ...)  # S3 method for class 'levelsMap' unique(x, incomparables = FALSE, ...)  mapLevels(x) <- value  # Default S3 method mapLevels(x) <- value  # S3 method for class 'list' mapLevels(x) <- value  # S3 method for class 'data.frame' mapLevels(x) <- value"},{"path":"https://alphagenes.github.io/AlphaPart/reference/mapLevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mapping levels — mapLevels","text":"x object whose levels mapped, look details codes boolean, create integer levelsMap (internal codes) character levelsMap (level names) codes boolean, create integer levelsMap (internal codes) character levelsMap (level names) sort boolean, sort levels character x, look details drop boolean, drop unused levels combine boolean, combine levels, look details ... additional arguments sort value levelsMap listLevelsMap, output mapLevels methods constructed user, look details","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/mapLevels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mapping levels — mapLevels","text":"Gregor Gorjanc","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/object.size.html","id":null,"dir":"Reference","previous_headings":"","what":"Report the Space Allocated for Objects — object.size","title":"Report the Space Allocated for Objects — object.size","text":"Provides estimate memory used store R objects.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/object.size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report the Space Allocated for Objects — object.size","text":"","code":"# S3 method for class 'object_sizes' print(   x,   quote = FALSE,   humanReadable = getOption(\"humanReadable\"),   standard = \"IEC\",   units,   digits = 1,   width = NULL,   sep = \" \",   justify = c(\"right\", \"left\"),   ... )  # S3 method for class 'object_sizes' format(   x,   humanReadable = getOption(\"humanReadable\"),   standard = \"IEC\",   units,   digits = 1,   width = NULL,   sep = \" \",   justify = c(\"right\", \"left\"),   ... )  is.object_sizes(x)  as.object_sizes(x)  # S3 method for class 'object_sizes' c(..., recursive = FALSE)"},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedFixBirthYear.html","id":null,"dir":"Reference","previous_headings":"","what":"pedFixBirthYear.R — pedFixBirthYear","title":"pedFixBirthYear.R — pedFixBirthYear","text":"function fix (impute) missing birth years pedigree.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedFixBirthYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedFixBirthYear.R — pedFixBirthYear","text":"","code":"pedFixBirthYear(   x,   interval,   down = FALSE,   na.rm = TRUE,   sort = TRUE,   direct = TRUE,   report = TRUE,   colId = 1,   colFid = 2,   colMid = 3,   colBY = 4 )"},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedFixBirthYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pedFixBirthYear.R — pedFixBirthYear","text":"x data.frame , (least) following columns: individual, father, mother identification, year birth; see arguments colId, colFid, colMid, colBY interval Numeric, value generation interval years. Logical, default impute birth years based birth year children starting youngest oldest individuals, =TRUE birth year imputed based birth year parents opposite order. na.rm Logical, remove NA values searching minimal (maximal) year birth children (parents); setting FALSE can lead decreased success imputation sort Logical, initially sort x using orderPed() children follow parents order make imputation optimal possible (imputation performed within loop first last unknown birth year); end original order restored. direct Logical, insert inferred birth years immediately can used successive individuals within loop. report Logical, report success. colId Numeric character, position name column holding individual identification. colFid Numeric character, position name column holding father identification. colMid Numeric character, position name column holding mother identification. colBY Numeric character, position name column holding birth year.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedFixBirthYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pedFixBirthYear.R — pedFixBirthYear","text":"Object x imputed birth years based birth year children parents. report=TRUE success printed screen number initially, fixed, left unknown birth years printed.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedFixBirthYear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pedFixBirthYear.R — pedFixBirthYear","text":"Warnings issued information use impute birth years missing values (NA) propagated. Arguments na.rm allow repeated use function, .e., =FALSE =TRUE (combination na.rm=TRUE) order propagate information pedigree \"convergence\". function can slow large pedigrees extensive missingness birth years.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedFixBirthYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pedFixBirthYear.R — pedFixBirthYear","text":"","code":"## Example pedigree with missing (unknown) birth year for some individuals ped0 <- data.frame(     id=c( 1, 2, 3,  4, 5, 6, 7,  8, 9, 10, 11, 12, 13, 14),                         fid=c( 0, 0, 0,  1, 1, 1, 3,  3, 3,  5,  4,  0,  0, 12),                         mid=c( 0, 0, 0,  2, 0, 2, 2,  2, 5,  0,  0,  0,  0, 13),                         birth_dt=c(NA, 0, 1, NA, 3, 3, 3, 3, 4, 4, 5, NA, 6, 6) + 2000)  ## First run - using information from children ped1 <- pedFixBirthYear(x=ped0, interval=1) #> Summary: #>  - initially: 3  #>  - fixed: 3  #>  - left: 0   ## Second run - using information from parents ped2 <- pedFixBirthYear(x=ped1, interval=1, down=TRUE) #> Summary: #>  - initially: 0  #>  - fixed: 0  #>  - left: 0   ## Third run - using information from children, but with no success ped3 <- pedFixBirthYear(x=ped2, interval=1) #> Summary: #>  - initially: 0  #>  - fixed: 0  #>  - left: 0"},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedSetBase.html","id":null,"dir":"Reference","previous_headings":"","what":"pedSetBase.R — pedSetBase","title":"pedSetBase.R — pedSetBase","text":"function set base population pedigree.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedSetBase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedSetBase.R — pedSetBase","text":"","code":"pedSetBase(   x,   keep = NULL,   unknown = NA,   report = TRUE,   colId = 1,   colFid = 2,   colMid = 3 )"},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedSetBase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pedSetBase.R — pedSetBase","text":"x data.frame , (least) following columns: individual, father, mother identification, year birth; see arguments colId, colFid, colMid, colBY keep Logical, indicator defines individuals stay pedigree; see details. unknown Value used represent unknown/missing identification report Logical, report success. colId Numeric character, position name column holding individual identification. colFid Numeric character, position name column holding father identification. colMid Numeric character, position name column holding mother identification.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedSetBase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pedSetBase.R — pedSetBase","text":"Object x removed rows individuals presence parents. report=TRUE progress printed screen.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedSetBase.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pedSetBase.R — pedSetBase","text":"Base population pedigree set removing rows individuals, presence parents also removed. Arguments na.rm allow repeated use function, .e., =FALSE =TRUE (combination na.rm=TRUE) order propagate information pedigree \"convergence\". function can slow large pedigrees extensive missingness birth years.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/pedSetBase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pedSetBase.R — pedSetBase","text":"","code":"## Example pedigree ped <- data.frame(      id=1:10,                        fid=c(0, 0, 0, 1, 1, 1, 3, 3, 3, 5),                        mid=c(0, 0, 0, 2, 0, 2, 2, 2, 5, 0),                   birth_dt=c(0, 0, 1, 2, 3, 3, 3, 4, 4, 5) + 2000)  ## Set base population as those individuals that were born after year 2002 pedSetBase(x=ped, keep=ped$birth_dt > 2002, unknown=0) #> All individuals: 10  #> Removing: 4, 40 % #> Kept: 6  #>    id fid mid birth_dt #> 5   5   0   0     2003 #> 6   6   0   0     2003 #> 7   7   0   0     2003 #> 8   8   0   0     2004 #> 9   9   0   5     2004 #> 10 10   5   0     2005"},{"path":"https://alphagenes.github.io/AlphaPart/reference/plot.summaryAlphaPart.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to plot summary of partitioned breeding values. — plot.summaryAlphaPart","title":"A function to plot summary of partitioned breeding values. — plot.summaryAlphaPart","text":"function plot summary partitioned breeding values.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/plot.summaryAlphaPart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to plot summary of partitioned breeding values. — plot.summaryAlphaPart","text":"","code":"# S3 method for class 'summaryAlphaPart' plot(x, by, sortValue,   sortValueFUN, sortValueDec, addSum, paths, xlab, ylab, xlim, ylim,   color, lineSize, lineType, lineTypeList, useDirectLabels, method,   labelPath, ...)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/plot.summaryAlphaPart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to plot summary of partitioned breeding values. — plot.summaryAlphaPart","text":"x summaryAlphaPart, object AlphaPart(...) summary(AlphaPart(...), ...) call. Character, name column summary function FUN applied; NULL (default) summary given whole table. sortValue Logical, affect legend attributes via sort paths according sortValueFUN function; logical, ordered paths given character vector. sortValueFUN Function, produces single value one vector, say mean sum. sortValueDec Logical, sort decreasing. addSum Logical, plot overall trend. paths Character list characters, name paths plot; NULL plot paths; see examples. xlab Character, x-axis label. ylab Character, y-axis label; can vector several labels traits x (recycled!). xlim Numeric, vector two values x-axis limits; use list vectors traits. ylim Numeric, vector two values y-axis limits; use list vectors traits. color Character, color names; default set 54 colors predefined RColorBrewer package; addition black colour attached begining overall trend; paths colors recycling occours. lineSize Numeric, line width. lineType Numeric, line type (recycled); can used lineTypeList=NULL. lineTypeList List, named list numeric values help point set paths (distinguished line type) within upper level paths (distinguished , color), e.g., lineTypeList=list(\"-1\"=1, \"-2\"=2, def=1) lead use line 2, paths \"-2\" end path name, line type 1 (default) , used paths; specification argument also causes recycling colors upper level paths; NULL lines standard line type, otherwise lineType effect. useDirectLabels Logical, use directlabels package legend. method List, method direct.label. labelPath Character, legend title; used useDirectLabels=FALSE. ... Arguments passed functions (used moment).","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/plot.summaryAlphaPart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to plot summary of partitioned breeding values. — plot.summaryAlphaPart","text":"list ggplot objects can modified displayed.  trait x one plot visualising summarized values.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/plot.summaryAlphaPart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to plot summary of partitioned breeding values. — plot.summaryAlphaPart","text":"Information summaries partitions breeding values can overhelming due large volume numbers. Plot method can used visualise data eye pleasing way using ggplot2 graphics.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/plot.summaryAlphaPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to plot summary of partitioned breeding values. — plot.summaryAlphaPart","text":"","code":"# \\donttest{  ## Partition additive genetic values by country (res <- AlphaPart(x=AlphaPart.ped, colPath=\"country\", colBV=c(\"bv1\", \"bv2\"))) #>  #> Size: #>  - individuals: 8  #>  - traits: 2 (bv1, bv2) #>  - paths: 2 (domestic, import) #>  - unknown (missing) values: #> bv1 bv2  #>   0   0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 8  #>    - paths: 2 (domestic, import) #>    - traits: 2 (bv1, bv2) #>  #>  Trait: bv1  #>  #>   IId FId MId gen  country gender bv1   bv1_pa      bv1_w bv1_domestic bv1_import #> 1   A           1 domestic      F 100 104.3333 -4.3333333      100.000      0.000 #> 2   B           1   import      M 105 104.3333  0.6666667        0.000    105.000 #> 3   C   B   A   2 domestic      F 104 102.5000  1.5000000       51.500     52.500 #> 4   T   B       2   import      F 102  52.5000 49.5000000        0.000    102.000 #> 5   D           2   import      M 108 104.3333  3.6666667        0.000    108.000 #> 6   E   D   C   3 domestic      M 107 106.0000  1.0000000       26.750     80.250 #> 7   U   D       3   import      F 107  54.0000 53.0000000        0.000    107.000 #> 8   V   E       4 domestic      F 109  53.5000 55.5000000       68.875     40.125 #>  #>  Trait: bv2  #>  #>   IId FId MId gen  country gender bv2    bv2_pa      bv2_w bv2_domestic bv2_import #> 1   A           1 domestic      F  88  99.66667 -11.666667           88          0 #> 2   B           1   import      M 110  99.66667  10.333333            0        110 #> 3   C   B   A   2 domestic      F 100  99.00000   1.000000           45         55 #> 4   T   B       2   import      F  97  55.00000  42.000000            0         97 #> 5   D           2   import      M 101  99.66667   1.333333            0        101 #> 6   E   D   C   3 domestic      M  80 100.50000 -20.500000            2         78 #> 7   U   D       3   import      F 102  50.50000  51.500000            0        102 #> 8   V   E       4 domestic      F 105  40.00000  65.000000           66         39 #>   ## Summarize population by generation (=trend) (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (domestic, import) #>    - traits: 2 (bv1, bv2) #>  #>  Trait: bv1  #>  #>   gen N      Sum domestic import #> 1   1 2 102.5000 50.00000 52.500 #> 2   2 3 104.6667 17.16667 87.500 #> 3   3 2 107.0000 13.37500 93.625 #> 4   4 1 109.0000 68.87500 40.125 #>  #>  Trait: bv2  #>  #>   gen N       Sum domestic   import #> 1   1 2  99.00000       44 55.00000 #> 2   2 3  99.33333       15 84.33333 #> 3   3 2  91.00000        1 90.00000 #> 4   4 1 105.00000       66 39.00000 #>   ## Plot the partitions p <- plot(ret, ylab=c(\"bv for trait 1\", \"bv for trait 2\"), xlab=\"Generation\") print(p[[1]]$abs) #> NULL print(p[[2]]$abs) #> NULL print(p)    ## Partition additive genetic values by country and sex AlphaPart.ped$country.gender <- with(AlphaPart.ped, paste(country, gender, sep=\"-\")) (res <- AlphaPart(x=AlphaPart.ped, colPath=\"country.gender\", colBV=c(\"bv1\", \"bv2\"))) #>  #> Size: #>  - individuals: 8  #>  - traits: 2 (bv1, bv2) #>  - paths: 4 (domestic-F, domestic-M, import-F, import-M) #>  - unknown (missing) values: #> bv1 bv2  #>   0   0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 8  #>    - paths: 4 (domestic-F, domestic-M, import-F, import-M) #>    - traits: 2 (bv1, bv2) #>  #>  Trait: bv1  #>  #>   IId FId MId gen  country gender country.gender bv1   bv1_pa      bv1_w bv1_domestic-F bv1_domestic-M bv1_import-F bv1_import-M #> 1   A           1 domestic      F     domestic-F 100 104.3333 -4.3333333        100.000            0.0          0.0        0.000 #> 2   B           1   import      M       import-M 105 104.3333  0.6666667          0.000            0.0          0.0      105.000 #> 3   C   B   A   2 domestic      F     domestic-F 104 102.5000  1.5000000         51.500            0.0          0.0       52.500 #> 4   T   B       2   import      F       import-F 102  52.5000 49.5000000          0.000            0.0         49.5       52.500 #> 5   D           2   import      M       import-M 108 104.3333  3.6666667          0.000            0.0          0.0      108.000 #> 6   E   D   C   3 domestic      M     domestic-M 107 106.0000  1.0000000         25.750            1.0          0.0       80.250 #> 7   U   D       3   import      F       import-F 107  54.0000 53.0000000          0.000            0.0         53.0       54.000 #> 8   V   E       4 domestic      F     domestic-F 109  53.5000 55.5000000         68.375            0.5          0.0       40.125 #>  #>  Trait: bv2  #>  #>   IId FId MId gen  country gender country.gender bv2    bv2_pa      bv2_w bv2_domestic-F bv2_domestic-M bv2_import-F bv2_import-M #> 1   A           1 domestic      F     domestic-F  88  99.66667 -11.666667          88.00           0.00          0.0          0.0 #> 2   B           1   import      M       import-M 110  99.66667  10.333333           0.00           0.00          0.0        110.0 #> 3   C   B   A   2 domestic      F     domestic-F 100  99.00000   1.000000          45.00           0.00          0.0         55.0 #> 4   T   B       2   import      F       import-F  97  55.00000  42.000000           0.00           0.00         42.0         55.0 #> 5   D           2   import      M       import-M 101  99.66667   1.333333           0.00           0.00          0.0        101.0 #> 6   E   D   C   3 domestic      M     domestic-M  80 100.50000 -20.500000          22.50         -20.50          0.0         78.0 #> 7   U   D       3   import      F       import-F 102  50.50000  51.500000           0.00           0.00         51.5         50.5 #> 8   V   E       4 domestic      F     domestic-F 105  40.00000  65.000000          76.25         -10.25          0.0         39.0 #>   ## Summarize population by generation (=trend) (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (domestic-F, domestic-M, import-F, import-M) #>    - traits: 2 (bv1, bv2) #>  #>  Trait: bv1  #>  #>   gen N      Sum domestic-F domestic-M import-F import-M #> 1   1 2 102.5000   50.00000        0.0      0.0   52.500 #> 2   2 3 104.6667   17.16667        0.0     16.5   71.000 #> 3   3 2 107.0000   12.87500        0.5     26.5   67.125 #> 4   4 1 109.0000   68.37500        0.5      0.0   40.125 #>  #>  Trait: bv2  #>  #>   gen N       Sum domestic-F domestic-M import-F import-M #> 1   1 2  99.00000      44.00       0.00     0.00 55.00000 #> 2   2 3  99.33333      15.00       0.00    14.00 70.33333 #> 3   3 2  91.00000      11.25     -10.25    25.75 64.25000 #> 4   4 1 105.00000      76.25     -10.25     0.00 39.00000 #>   ## Plot the partitions p <- plot(ret, ylab=c(\"BV for trait 1\", \"BV for trait 2\"), xlab=\"Generation\") print(p)   p <- plot(ret, ylab=c(\"BV for trait 1\", \"BV for trait 2\"), xlab=\"Generation\",         lineTypeList=list(\"-1\"=1, \"-2\"=2, def=3)) print(p)   p <- plot(ret, ylab=c(\"BV for trait 1\", \"BV for trait 2\"), xlab=\"Generation\",         lineTypeList=list(\"-1\"=1, \"-2\"=2, def=3), useGgplot2=FALSE, useDirectLabels = FALSE) print(p)    ## Plot control (color and type of lines + limits) p <- plot(ret, ylab=c(\"BV for trait 1\", \"BV for trait 2\"), xlab=\"Generation\",         useGgplot2=TRUE, color=c(\"green\", \"gray\"), lineType=c(2, 3),         sortValue=FALSE, lineSize=4,         xlim=c(-1, 7)) print(p)   # }"},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.AlphaPart.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for the output of AlphaPart function. — print.AlphaPart","title":"Print method for the output of AlphaPart function. — print.AlphaPart","text":"Partitioning breeding values often performed quite large datasets, quickly fills whole screen. Print method therefore prints paths, number individuals first last lines trait quickly see kind data x.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.AlphaPart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for the output of AlphaPart function. — print.AlphaPart","text":"","code":"# S3 method for class 'AlphaPart' print(x, n, ...)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.AlphaPart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for the output of AlphaPart function. — print.AlphaPart","text":"x AlphaPart, output object AlphaPart function. n Integer, number first last rows x print using head tail. ... Arguments passed print function.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.AlphaPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for the output of AlphaPart function. — print.AlphaPart","text":"","code":"## Small pedigree with additive genetic (=breeding) values ped <- data.frame(  id=c(  1,   2,   3,   4,   5,   6),                    fid=c(  0,   0,   2,   0,   4,   0),                    mid=c(  0,   0,   1,   0,   3,   3),                    loc=c(\"A\", \"B\", \"A\", \"B\", \"A\", \"A\"),                    gen=c(  1,   1,   2,   2,   3,   3),                   trt1=c(100, 120, 115, 130, 125, 125),                   trt2=c(100, 110, 105, 100,  85, 110))  ## Partition additive genetic values tmp <- AlphaPart(x=ped, colBV=c(\"trt1\", \"trt2\")) #>  #> Size: #>  - individuals: 6  #>  - traits: 2 (trt1, trt2) #>  - paths: 2 (A, B) #>  - unknown (missing) values: #> trt1 trt2  #>    0    0  print(tmp) #>  #>  #>  Partitions of breeding values  #>    - individuals: 6  #>    - paths: 2 (A, B) #>    - traits: 2 (trt1, trt2) #>  #>  Trait: trt1  #>  #>   id fid mid loc gen trt1  trt1_pa     trt1_w trt1_A trt1_B #> 1  1   0   0   A   1  100 116.6667 -16.666667    100      0 #> 2  2   0   0   B   1  120 116.6667   3.333333      0    120 #> 3  3   2   1   A   2  115 110.0000   5.000000     55     60 #> 4  4   0   0   B   2  130 116.6667  13.333333      0    130 #> 5  5   4   3   A   3  125 122.5000   2.500000     30     95 #> 6  6   0   3   A   3  125  57.5000  67.500000     95     30 #>  #>  Trait: trt2  #>  #>   id fid mid loc gen trt2  trt2_pa     trt2_w trt2_A trt2_B #> 1  1   0   0   A   1  100 103.3333  -3.333333  100.0    0.0 #> 2  2   0   0   B   1  110 103.3333   6.666667    0.0  110.0 #> 3  3   2   1   A   2  105 105.0000   0.000000   50.0   55.0 #> 4  4   0   0   B   2  100 103.3333  -3.333333    0.0  100.0 #> 5  5   4   3   A   3   85 102.5000 -17.500000    7.5   77.5 #> 6  6   0   3   A   3  110  52.5000  57.500000   82.5   27.5 #>   ## Summarize by generation (genetic mean) summary(tmp, by=\"gen\") #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (A, B) #>    - traits: 2 (trt1, trt2) #>  #>  Trait: trt1  #>  #>   gen N   Sum    A    B #> 1   1 2 110.0 50.0 60.0 #> 2   2 2 122.5 27.5 95.0 #> 3   3 2 125.0 62.5 62.5 #>  #>  Trait: trt2  #>  #>   gen N   Sum  A    B #> 1   1 2 105.0 50 55.0 #> 2   2 2 102.5 25 77.5 #> 3   3 2  97.5 45 52.5 #>   ## Summarize by generation (genetic variance) summary(tmp, by=\"gen\", FUN = var) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (A, B, Sum.Cov) #>    - traits: 2 (trt1, trt2) #>  #>  Trait: trt1  #>  #>   gen N   Sum      A      B Sum.Cov #> 1   1 2 200.0 5000.0 7200.0  -12000 #> 2   2 2 112.5 1512.5 2450.0   -3850 #> 3   3 2   0.0 2112.5 2112.5   -4225 #>  #>  Trait: trt2  #>  #>   gen N   Sum      A      B Sum.Cov #> 1   1 2  50.0 5000.0 6050.0  -11000 #> 2   2 2  12.5 1250.0 1012.5   -2250 #> 3   3 2 312.5 2812.5 1250.0   -3750 #>    # \\donttest{ ## There are also two demos   demo(topic=\"AlphaPart_deterministic\", package=\"AlphaPart\",        ask=interactive()) #>  #>  #> \tdemo(AlphaPart_deterministic) #> \t---- ~~~~~~~~~~~~~~~~~~~~~~~ #>  #> > ### partAGV_deterministic.R #> > ###----------------------------------------------------------------------------- #> > ### $Id$ #> > ###----------------------------------------------------------------------------- #> >  #> > ### DESCRIPTION OF A DEMONSTRATION #> > ###----------------------------------------------------------------------------- #> >  #> > ## A demonstration with a simple example to see in action the partitioning of #> > ## additive genetic values by paths (Garcia-Cortes et al., 2008; Animal) #> > ##        #> > ## DETERMINISTIC SIMULATION (sort of) #> > ## #> > ## We have two locations (1 and 2). The first location has individualss with higher #> > ## additive genetic value. Males from the first location are imported males to the #> > ## second location from generation 2/3. This clearly leads to genetic gain in the #> > ## second location. However, the second location can also perform their own selection #> > ## so the question is how much genetic gain is due to the import of genes from the #> > ## first location and due to their own selection. #> > ## #> > ## Above scenario will be tested with a simple example of a pedigree bellow. Two #> > ## scenarios will be evaluated: without or with own selection in the second location. #> > ## Selection will always be present in the first location. #> > ## #> > ## Additive genetic values are provided, i.e., no inference is being done! #> > ## #> > ## The idea of this example is not to do extensive simulations, but just to have #> > ## a simple example to see how the partitioning of additive genetic values works. #> >  #> > ### SETUP #> > ###----------------------------------------------------------------------------- #> >  #> > options(width=200) #>  #> > ### EXAMPLE PEDIGREE & SETUP OF MENDELIAN SAMPLING - \"DETERMINISTIC\" #> > ###----------------------------------------------------------------------------- #> >  #> > ## Generation 0 #> >   id0 <- c(\"01\", \"02\", \"03\", \"04\") #>  #> >  fid0 <- mid0 <- rep(NA, times=length(id0)) #>  #> >    h0 <- rep(c(1, 2), each=2) #>  #> >    g0 <- rep(0, times=length(id0)) #>  #> >   w10 <- c( 2, 2, 0, 0) #>  #> >   w20 <- c( 2, 2, 0, 0) #>  #> > ## Generation 1 #> >   id1 <- c(\"11\", \"12\", \"13\", \"14\") #>  #> >  fid1 <- c(\"01\", \"01\", \"03\", \"03\") #>  #> >  mid1 <- c(\"02\", \"02\", \"04\", \"04\") #>  #> >    h1 <- h0 #>  #> >    g1 <- rep(1, times=length(id1)) #>  #> >   w11 <- c( 0.6,  0.2, -0.6,  0.2) #>  #> >   w21 <- c( 0.6,  0.2,  0.6,  0.2) #>  #> > ## Generation 2 #> >   id2 <- c(\"21\", \"22\", \"23\", \"24\") #>  #> >  fid2 <- c(\"12\", \"12\", \"12\", \"12\") #>  #> >  mid2 <- c(\"11\", \"11\", \"13\", \"14\") #>  #> >    h2 <- h0 #>  #> >    g2 <- rep(2, times=length(id2)) #>  #> >   w12 <- c( 0.6,  0.3, -0.2,  0.2) #>  #> >   w22 <- c( 0.6,  0.3,  0.2,  0.2) #>  #> > ## Generation 3 #> >   id3 <- c(\"31\", \"32\", \"33\", \"34\") #>  #> >  fid3 <- c(\"22\", \"22\", \"22\", \"22\") #>  #> >  mid3 <- c(\"21\", \"21\", \"23\", \"24\") #>  #> >    h3 <- h0 #>  #> >    g3 <- rep(3, times=length(id3)) #>  #> >   w13 <- c( 0.7,  0.1, -0.3,  0.3) #>  #> >   w23 <- c( 0.7,  0.1,  0.3,  0.3) #>  #> > ## Generation 4 #> >   id4 <- c(\"41\", \"42\", \"43\", \"44\") #>  #> >  fid4 <- c(\"32\", \"32\", \"32\", \"32\") #>  #> >  mid4 <- c(\"31\", \"31\", \"33\", \"34\") #>  #> >    h4 <- h0 #>  #> >    g4 <- rep(4, times=length(id4)) #>  #> >   w14 <- c( 0.8,  0.8, -0.1,  0.3) #>  #> >   w24 <- c( 0.8,  0.8,  0.1,  0.3) #>  #> > ## Generation 5 #> >   id5 <- c(\"51\", \"52\", \"53\", \"54\") #>  #> >  fid5 <- c(\"42\", \"42\", \"42\", \"42\") #>  #> >  mid5 <- c(\"41\", \"41\", \"43\", \"44\") #>  #> >    h5 <- h0 #>  #> >    g5 <- rep(5, times=length(id4)) #>  #> >   w15 <- c( 0.8,  1.0, -0.2,  0.3) #>  #> >   w25 <- c( 0.8,  1.0,  0.2,  0.3) #>  #> > ped <- data.frame( id=c( id0,  id1,  id2,  id3,  id4,  id5), #> +                   fid=c(fid0, fid1, fid2, fid3, fid4, fid5), #> +                   mid=c(mid0, mid1, mid2, mid3, mid4, mid5), #> +                   loc=c(  h0,   h1,   h2,   h3,   h4,  h5), #> +                   gen=c(  g0,   g1,   g2,   g3,   g4,  g5), #> +                    w1=c( w10,  w11,  w12,  w13,  w14,  w15), #> +                    w2=c( w20,  w21,  w22,  w23,  w24,  w25)) #>  #> > ped$sex <- 2 #>  #> > ped[ped$id %in% ped$fid, \"sex\"] <- 1 #>  #> > ped$loc.gen <- with(ped, paste(loc, gen, sep=\"-\")) #>  #> > ### SIMULATE ADDITIVE GENETIC VALUES - SUM PARENT AVERAGE AND MENDELIAN SAMPLING #> > ###----------------------------------------------------------------------------- #> >  #> > ## Additive genetic mean in founders by location #> > mu1 <-  2 #>  #> > mu2 <-  0 #>  #> > ## Additive genetic variance in population #> > sigma2 <- 1 #>  #> > sigma  <- sqrt(sigma2) #>  #> > ## Threshold value for Mendelian sampling for selection - only values above this #> > ##  will be accepted in simulation #> > t <- 0 #>  #> > ped$agv1 <- ped$pa1 <- NA ## Scenario (trait) 1: No selection in the second location #>  #> > ped$agv2 <- ped$pa2 <- NA ## Scenario (trait) 2:    Selection in the second location #>  #> > ## Generation 0  - founders (no parent average here - so setting it to zero) #> > ped[ped$gen == 0, c(\"pa1\",  \"pa2\")] <- 0 #>  #> > ped[ped$gen == 0, c(\"agv1\", \"agv2\")] <- ped[ped$gen == 0, c(\"w1\", \"w2\")] #>  #> > ## Generation 1+ - non-founders (parent average + Mendelian sampling) #> > for(i in (length(g0)+1):nrow(ped)) { #> +   ped[i, \"pa1\"] <- 0.5 * (ped[ped$id %in% ped[i, \"fid\"], \"agv1\"] + #> +                           ped[ped$id %in% ped[i, \"mid\"], \"agv1\"]) #> +   ped[i, \"pa2\"] <- 0.5 * (ped[ped$id %in% ped[i, \"fid\"], \"agv2\"] + #> +                           ped[ped$id %in% ped[i, \"mid\"], \"agv2\"]) #> +   ped[i, c(\"agv1\", \"agv2\")] <- ped[i, c(\"pa1\", \"pa2\")] + ped[i, c(\"w1\", \"w2\")] #> + } #>  #> > ### PLOT INDIVIDUAL ADDITIVE GENETIC VALUES #> > ###----------------------------------------------------------------------------- #> >  #> > par(mfrow=c(2, 1), bty=\"l\", pty=\"m\", mar=c(2, 2, 1, 1) + .1, mgp=c(0.7, 0.2, 0)) #>  #> > tmp <- ped$gen + c(-1.5, -0.5, 0.5, 1.5) * 0.1 #>  #> > with(ped, plot(agv1 ~ tmp, pch=c(19, 21)[ped$loc], ylab=\"Additive genetic value\", #> +                xlab=\"Generation\", main=\"Selection in location 1\", axes=FALSE, #> +                ylim=range(c(agv1, agv2)))) #>  #> > axis(1, labels=FALSE, tick=FALSE); axis(2, labels=FALSE, tick=FALSE); box() #>  #> > legend(x=\"topleft\", legend=c(1, 2), title=\"Location\", pch=c(19, 21), bty=\"n\") #>  #> > with(ped, plot(agv2 ~ tmp, pch=c(19, 21)[ped$loc], ylab=\"Additive genetic value\", #> +                xlab=\"Generation\", main=\"Selection in locations 1 and 2\", axes=FALSE, #> +                ylim=range(c(agv1, agv2))))  #>  #> > axis(1, labels=FALSE, tick=FALSE); axis(2, labels=FALSE, tick=FALSE); box() #>  #> > legend(x=\"topleft\", legend=c(1, 2), title=\"Location\", pch=c(19, 21), bty=\"n\") #>  #> > ### PARTITION ADDITIVE GENETIC VALUES BY ... #> > ###----------------------------------------------------------------------------- #> >  #> > ## Compute partitions by location #> > (res <- AlphaPart(x=ped, colPath=\"loc\", colBV=c(\"agv1\", \"agv2\"))) #>  #> Size: #>  - individuals: 24  #>  - traits: 2 (agv1, agv2) #>  - paths: 2 (1, 2) #>  - unknown (missing) values: #> agv1 agv2  #>    0    0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 24  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   id  fid  mid loc gen  w1  w2 sex loc.gen pa1 pa2 agv1 agv1_pa agv1_w agv1_1 agv1_2 #> 1 01 <NA> <NA>   1   0 2.0 2.0   1     1-0   0   0  2.0       0    2.0    2.0      0 #> 2 02 <NA> <NA>   1   0 2.0 2.0   2     1-0   0   0  2.0       0    2.0    2.0      0 #> 3 03 <NA> <NA>   2   0 0.0 0.0   1     2-0   0   0  0.0       0    0.0    0.0      0 #> 4 04 <NA> <NA>   2   0 0.0 0.0   2     2-0   0   0  0.0       0    0.0    0.0      0 #> 5 11   01   02   1   1 0.6 0.6   2     1-1   2   2  2.6       2    0.6    2.6      0 #> 6 12   01   02   1   1 0.2 0.2   1     1-1   2   2  2.2       2    0.2    2.2      0 #> ... #>    id fid mid loc gen   w1  w2 sex loc.gen  pa1   pa2 agv1 agv1_pa agv1_w agv1_1  agv1_2 #> 19 43  32  33   2   4 -0.1 0.1   2     2-4 2.15 2.700 2.05    2.15   -0.1 2.4250 -0.3750 #> 20 44  32  34   2   4  0.3 0.3   2     2-4 2.65 2.650 2.95    2.65    0.3 2.4250  0.5250 #> 21 51  42  41   1   5  0.8 0.8   2     1-5 4.05 4.050 4.85    4.05    0.8 4.8500  0.0000 #> 22 52  42  41   1   5  1.0 1.0   2     1-5 4.05 4.050 5.05    4.05    1.0 5.0500  0.0000 #> 23 53  42  43   2   5 -0.2 0.2   2     2-5 3.05 3.425 2.85    3.05   -0.2 3.2375 -0.3875 #> 24 54  42  44   2   5  0.3 0.3   2     2-5 3.50 3.500 3.80    3.50    0.3 3.2375  0.5625 #>  #>  Trait: agv2  #>  #>   id  fid  mid loc gen  w1  w2 sex loc.gen pa1 pa2 agv2 agv2_pa agv2_w agv2_1 agv2_2 #> 1 01 <NA> <NA>   1   0 2.0 2.0   1     1-0   0   0  2.0       0    2.0    2.0      0 #> 2 02 <NA> <NA>   1   0 2.0 2.0   2     1-0   0   0  2.0       0    2.0    2.0      0 #> 3 03 <NA> <NA>   2   0 0.0 0.0   1     2-0   0   0  0.0       0    0.0    0.0      0 #> 4 04 <NA> <NA>   2   0 0.0 0.0   2     2-0   0   0  0.0       0    0.0    0.0      0 #> 5 11   01   02   1   1 0.6 0.6   2     1-1   2   2  2.6       2    0.6    2.6      0 #> 6 12   01   02   1   1 0.2 0.2   1     1-1   2   2  2.2       2    0.2    2.2      0 #> ... #>    id fid mid loc gen   w1  w2 sex loc.gen  pa1   pa2  agv2 agv2_pa agv2_w agv2_1 agv2_2 #> 19 43  32  33   2   4 -0.1 0.1   2     2-4 2.15 2.700 2.800   2.700    0.1 2.4250 0.3750 #> 20 44  32  34   2   4  0.3 0.3   2     2-4 2.65 2.650 2.950   2.650    0.3 2.4250 0.5250 #> 21 51  42  41   1   5  0.8 0.8   2     1-5 4.05 4.050 4.850   4.050    0.8 4.8500 0.0000 #> 22 52  42  41   1   5  1.0 1.0   2     1-5 4.05 4.050 5.050   4.050    1.0 5.0500 0.0000 #> 23 53  42  43   2   5 -0.2 0.2   2     2-5 3.05 3.425 3.625   3.425    0.2 3.2375 0.3875 #> 24 54  42  44   2   5  0.3 0.3   2     2-5 3.50 3.500 3.800   3.500    0.3 3.2375 0.5625 #>  #>  #> > ## Summarize whole population #> > (ret <- summary(res)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   N NA     Sum        1         2 #> 1 1 24 2.33125 2.346875 -0.015625 #>  #>  Trait: agv2  #>  #>   N NA      Sum        1         2 #> 1 1 24 2.532292 2.346875 0.1854167 #>  #>  #> > ## Summarize and plot by generation (=trend) #> > (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   gen N    Sum       1        2 #> 1   0 4 1.0000 1.00000  0.00000 #> 2   1 4 1.1000 1.20000 -0.10000 #> 3   2 4 1.9250 1.97500 -0.05000 #> 4   3 4 2.5500 2.57500 -0.02500 #> 5   4 4 3.2750 3.23750  0.03750 #> 6   5 4 4.1375 4.09375  0.04375 #>  #>  Trait: agv2  #>  #>   gen N     Sum       1      2 #> 1   0 4 1.00000 1.00000 0.0000 #> 2   1 4 1.40000 1.20000 0.2000 #> 3   2 4 2.17500 1.97500 0.2000 #> 4   3 4 2.82500 2.57500 0.2500 #> 5   4 4 3.46250 3.23750 0.2250 #> 6   5 4 4.33125 4.09375 0.2375 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends #> > (ret <- summary(res, by=\"loc.gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>    loc.gen N    Sum      1       2 #> 1      1-0 2  2.000 2.0000  0.0000 #> 2      1-1 2  2.400 2.4000  0.0000 #> 3      1-2 2  2.850 2.8500  0.0000 #> 4      1-3 2  3.250 3.2500  0.0000 #> 5      1-4 2  4.050 4.0500  0.0000 #> 6      1-5 2  4.950 4.9500  0.0000 #> 7      2-0 2  0.000 0.0000  0.0000 #> 8      2-1 2 -0.200 0.0000 -0.2000 #> 9      2-2 2  1.000 1.1000 -0.1000 #> 10     2-3 2  1.850 1.9000 -0.0500 #> 11     2-4 2  2.500 2.4250  0.0750 #> 12     2-5 2  3.325 3.2375  0.0875 #>  #>  Trait: agv2  #>  #>    loc.gen N    Sum      1     2 #> 1      1-0 2 2.0000 2.0000 0.000 #> 2      1-1 2 2.4000 2.4000 0.000 #> 3      1-2 2 2.8500 2.8500 0.000 #> 4      1-3 2 3.2500 3.2500 0.000 #> 5      1-4 2 4.0500 4.0500 0.000 #> 6      1-5 2 4.9500 4.9500 0.000 #> 7      2-0 2 0.0000 0.0000 0.000 #> 8      2-1 2 0.4000 0.0000 0.400 #> 9      2-2 2 1.5000 1.1000 0.400 #> 10     2-3 2 2.4000 1.9000 0.500 #> 11     2-4 2 2.8750 2.4250 0.450 #> 12     2-5 2 3.7125 3.2375 0.475 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 1 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 1)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N  Sum    1 2 #> 1     1-0 2 2.00 2.00 0 #> 2     1-1 2 2.40 2.40 0 #> 3     1-2 2 2.85 2.85 0 #> 4     1-3 2 3.25 3.25 0 #> 5     1-4 2 4.05 4.05 0 #> 6     1-5 2 4.95 4.95 0 #>  #>  Trait: agv2  #>  #>   loc.gen N  Sum    1 2 #> 1     1-0 2 2.00 2.00 0 #> 2     1-1 2 2.40 2.40 0 #> 3     1-2 2 2.85 2.85 0 #> 4     1-3 2 3.25 3.25 0 #> 5     1-4 2 4.05 4.05 0 #> 6     1-5 2 4.95 4.95 0 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 2 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 2)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N    Sum      1       2 #> 1     2-0 2  0.000 0.0000  0.0000 #> 2     2-1 2 -0.200 0.0000 -0.2000 #> 3     2-2 2  1.000 1.1000 -0.1000 #> 4     2-3 2  1.850 1.9000 -0.0500 #> 5     2-4 2  2.500 2.4250  0.0750 #> 6     2-5 2  3.325 3.2375  0.0875 #>  #>  Trait: agv2  #>  #>   loc.gen N    Sum      1     2 #> 1     2-0 2 0.0000 0.0000 0.000 #> 2     2-1 2 0.4000 0.0000 0.400 #> 3     2-2 2 1.5000 1.1000 0.400 #> 4     2-3 2 2.4000 1.9000 0.500 #> 5     2-4 2 2.8750 2.4250 0.450 #> 6     2-5 2 3.7125 3.2375 0.475 #>  #>  #> > plot(ret)   #>  #> > ## Compute partitions by location and sex #> > ped$loc.sex <- with(ped, paste(loc, sex, sep=\"-\")) #>  #> > (res <- AlphaPart(x=ped, colPath=\"loc.sex\", colBV=c(\"agv1\", \"agv2\"))) #>  #> Size: #>  - individuals: 24  #>  - traits: 2 (agv1, agv2) #>  - paths: 4 (1-1, 1-2, 2-1, 2-2) #>  - unknown (missing) values: #> agv1 agv2  #>    0    0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 24  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   id  fid  mid loc gen  w1  w2 sex loc.gen pa1 pa2 loc.sex agv1 agv1_pa agv1_w agv1_1-1 agv1_1-2 agv1_2-1 agv1_2-2 #> 1 01 <NA> <NA>   1   0 2.0 2.0   1     1-0   0   0     1-1  2.0       0    2.0      2.0      0.0        0        0 #> 2 02 <NA> <NA>   1   0 2.0 2.0   2     1-0   0   0     1-2  2.0       0    2.0      0.0      2.0        0        0 #> 3 03 <NA> <NA>   2   0 0.0 0.0   1     2-0   0   0     2-1  0.0       0    0.0      0.0      0.0        0        0 #> 4 04 <NA> <NA>   2   0 0.0 0.0   2     2-0   0   0     2-2  0.0       0    0.0      0.0      0.0        0        0 #> 5 11   01   02   1   1 0.6 0.6   2     1-1   2   2     1-2  2.6       2    0.6      1.0      1.6        0        0 #> 6 12   01   02   1   1 0.2 0.2   1     1-1   2   2     1-1  2.2       2    0.2      1.2      1.0        0        0 #> ... #>    id fid mid loc gen   w1  w2 sex loc.gen  pa1   pa2 loc.sex agv1 agv1_pa agv1_w agv1_1-1 agv1_1-2 agv1_2-1 agv1_2-2 #> 19 43  32  33   2   4 -0.1 0.1   2     2-4 2.15 2.700     2-2 2.05    2.15   -0.1   1.1750     1.25        0  -0.3750 #> 20 44  32  34   2   4  0.3 0.3   2     2-4 2.65 2.650     2-2 2.95    2.65    0.3   1.1750     1.25        0   0.5250 #> 21 51  42  41   1   5  0.8 0.8   2     1-5 4.05 4.050     1-2 4.85    4.05    0.8   1.7000     3.15        0   0.0000 #> 22 52  42  41   1   5  1.0 1.0   2     1-5 4.05 4.050     1-2 5.05    4.05    1.0   1.7000     3.35        0   0.0000 #> 23 53  42  43   2   5 -0.2 0.2   2     2-5 3.05 3.425     2-2 2.85    3.05   -0.2   1.6375     1.60        0  -0.3875 #> 24 54  42  44   2   5  0.3 0.3   2     2-5 3.50 3.500     2-2 3.80    3.50    0.3   1.6375     1.60        0   0.5625 #>  #>  Trait: agv2  #>  #>   id  fid  mid loc gen  w1  w2 sex loc.gen pa1 pa2 loc.sex agv2 agv2_pa agv2_w agv2_1-1 agv2_1-2 agv2_2-1 agv2_2-2 #> 1 01 <NA> <NA>   1   0 2.0 2.0   1     1-0   0   0     1-1  2.0       0    2.0      2.0      0.0        0        0 #> 2 02 <NA> <NA>   1   0 2.0 2.0   2     1-0   0   0     1-2  2.0       0    2.0      0.0      2.0        0        0 #> 3 03 <NA> <NA>   2   0 0.0 0.0   1     2-0   0   0     2-1  0.0       0    0.0      0.0      0.0        0        0 #> 4 04 <NA> <NA>   2   0 0.0 0.0   2     2-0   0   0     2-2  0.0       0    0.0      0.0      0.0        0        0 #> 5 11   01   02   1   1 0.6 0.6   2     1-1   2   2     1-2  2.6       2    0.6      1.0      1.6        0        0 #> 6 12   01   02   1   1 0.2 0.2   1     1-1   2   2     1-1  2.2       2    0.2      1.2      1.0        0        0 #> ... #>    id fid mid loc gen   w1  w2 sex loc.gen  pa1   pa2 loc.sex  agv2 agv2_pa agv2_w agv2_1-1 agv2_1-2 agv2_2-1 agv2_2-2 #> 19 43  32  33   2   4 -0.1 0.1   2     2-4 2.15 2.700     2-2 2.800   2.700    0.1   1.1750     1.25        0   0.3750 #> 20 44  32  34   2   4  0.3 0.3   2     2-4 2.65 2.650     2-2 2.950   2.650    0.3   1.1750     1.25        0   0.5250 #> 21 51  42  41   1   5  0.8 0.8   2     1-5 4.05 4.050     1-2 4.850   4.050    0.8   1.7000     3.15        0   0.0000 #> 22 52  42  41   1   5  1.0 1.0   2     1-5 4.05 4.050     1-2 5.050   4.050    1.0   1.7000     3.35        0   0.0000 #> 23 53  42  43   2   5 -0.2 0.2   2     2-5 3.05 3.425     2-2 3.625   3.425    0.2   1.6375     1.60        0   0.3875 #> 24 54  42  44   2   5  0.3 0.3   2     2-5 3.50 3.500     2-2 3.800   3.500    0.3   1.6375     1.60        0   0.5625 #>  #>  #> > ## Summarize and plot by generation (=trend) #> > (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   gen N    Sum     1-1   1-2 2-1      2-2 #> 1   0 4 1.0000 0.50000 0.500   0  0.00000 #> 2   1 4 1.1000 0.55000 0.650   0 -0.10000 #> 3   2 4 1.9250 0.92500 1.050   0 -0.05000 #> 4   3 4 2.5500 1.15000 1.425   0 -0.02500 #> 5   4 4 3.2750 1.43750 1.800   0  0.03750 #> 6   5 4 4.1375 1.66875 2.425   0  0.04375 #>  #>  Trait: agv2  #>  #>   gen N     Sum     1-1   1-2 2-1    2-2 #> 1   0 4 1.00000 0.50000 0.500   0 0.0000 #> 2   1 4 1.40000 0.55000 0.650   0 0.2000 #> 3   2 4 2.17500 0.92500 1.050   0 0.2000 #> 4   3 4 2.82500 1.15000 1.425   0 0.2500 #> 5   4 4 3.46250 1.43750 1.800   0 0.2250 #> 6   5 4 4.33125 1.66875 2.425   0 0.2375 #>  #>  #> > plot(ret)   #>  #> > plot(ret, lineTypeList=list(\"-1\"=1, \"-2\"=2, def=3))   #>  #> > ## Summarize and plot location specific trends #> > (ret <- summary(res, by=\"loc.gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>    loc.gen N    Sum    1-1  1-2 2-1     2-2 #> 1      1-0 2  2.000 1.0000 1.00   0  0.0000 #> 2      1-1 2  2.400 1.1000 1.30   0  0.0000 #> 3      1-2 2  2.850 1.2500 1.60   0  0.0000 #> 4      1-3 2  3.250 1.3000 1.95   0  0.0000 #> 5      1-4 2  4.050 1.7000 2.35   0  0.0000 #> 6      1-5 2  4.950 1.7000 3.25   0  0.0000 #> 7      2-0 2  0.000 0.0000 0.00   0  0.0000 #> 8      2-1 2 -0.200 0.0000 0.00   0 -0.2000 #> 9      2-2 2  1.000 0.6000 0.50   0 -0.1000 #> 10     2-3 2  1.850 1.0000 0.90   0 -0.0500 #> 11     2-4 2  2.500 1.1750 1.25   0  0.0750 #> 12     2-5 2  3.325 1.6375 1.60   0  0.0875 #>  #>  Trait: agv2  #>  #>    loc.gen N    Sum    1-1  1-2 2-1   2-2 #> 1      1-0 2 2.0000 1.0000 1.00   0 0.000 #> 2      1-1 2 2.4000 1.1000 1.30   0 0.000 #> 3      1-2 2 2.8500 1.2500 1.60   0 0.000 #> 4      1-3 2 3.2500 1.3000 1.95   0 0.000 #> 5      1-4 2 4.0500 1.7000 2.35   0 0.000 #> 6      1-5 2 4.9500 1.7000 3.25   0 0.000 #> 7      2-0 2 0.0000 0.0000 0.00   0 0.000 #> 8      2-1 2 0.4000 0.0000 0.00   0 0.400 #> 9      2-2 2 1.5000 0.6000 0.50   0 0.400 #> 10     2-3 2 2.4000 1.0000 0.90   0 0.500 #> 11     2-4 2 2.8750 1.1750 1.25   0 0.450 #> 12     2-5 2 3.7125 1.6375 1.60   0 0.475 #>  #>  #> > plot(ret, lineTypeList=list(\"-1\"=1, \"-2\"=2, def=3))   #>  #> > ## Summarize and plot location specific trends but only for location 1 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 1)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N  Sum  1-1  1-2 2-1 2-2 #> 1     1-0 2 2.00 1.00 1.00   0   0 #> 2     1-1 2 2.40 1.10 1.30   0   0 #> 3     1-2 2 2.85 1.25 1.60   0   0 #> 4     1-3 2 3.25 1.30 1.95   0   0 #> 5     1-4 2 4.05 1.70 2.35   0   0 #> 6     1-5 2 4.95 1.70 3.25   0   0 #>  #>  Trait: agv2  #>  #>   loc.gen N  Sum  1-1  1-2 2-1 2-2 #> 1     1-0 2 2.00 1.00 1.00   0   0 #> 2     1-1 2 2.40 1.10 1.30   0   0 #> 3     1-2 2 2.85 1.25 1.60   0   0 #> 4     1-3 2 3.25 1.30 1.95   0   0 #> 5     1-4 2 4.05 1.70 2.35   0   0 #> 6     1-5 2 4.95 1.70 3.25   0   0 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 2 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 2)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N    Sum    1-1  1-2 2-1     2-2 #> 1     2-0 2  0.000 0.0000 0.00   0  0.0000 #> 2     2-1 2 -0.200 0.0000 0.00   0 -0.2000 #> 3     2-2 2  1.000 0.6000 0.50   0 -0.1000 #> 4     2-3 2  1.850 1.0000 0.90   0 -0.0500 #> 5     2-4 2  2.500 1.1750 1.25   0  0.0750 #> 6     2-5 2  3.325 1.6375 1.60   0  0.0875 #>  #>  Trait: agv2  #>  #>   loc.gen N    Sum    1-1  1-2 2-1   2-2 #> 1     2-0 2 0.0000 0.0000 0.00   0 0.000 #> 2     2-1 2 0.4000 0.0000 0.00   0 0.400 #> 3     2-2 2 1.5000 0.6000 0.50   0 0.400 #> 4     2-3 2 2.4000 1.0000 0.90   0 0.500 #> 5     2-4 2 2.8750 1.1750 1.25   0 0.450 #> 6     2-5 2 3.7125 1.6375 1.60   0 0.475 #>  #>  #> > plot(ret)   #>  #> > ###----------------------------------------------------------------------------- #> > ### AlphaPart_deterministic.R ends here   demo(topic=\"AlphaPart_stochastic\",     package=\"AlphaPart\",        ask=interactive()) #>  #>  #> \tdemo(AlphaPart_stochastic) #> \t---- ~~~~~~~~~~~~~~~~~~~~ #>  #> > ### demo_stohastic.R #> > ###----------------------------------------------------------------------------- #> > ### $Id$ #> > ###----------------------------------------------------------------------------- #> >  #> > ### DESCRIPTION OF A DEMONSTRATION #> > ###----------------------------------------------------------------------------- #> >  #> > ## A demonstration with a simple example to see in action the partitioning of #> > ## additive genetic values by paths (Garcia-Cortes et al., 2008; Animal) #> > ##        #> > ## STOHASTIC SIMULATION (sort of) #> > ## #> > ## We have two locations (1 and 2). The first location has individualss with higher #> > ## additive genetic value. Males from the first location are imported males to the #> > ## second location from generation 2/3. This clearly leads to genetic gain in the #> > ## second location. However, the second location can also perform their own selection #> > ## so the question is how much genetic gain is due to the import of genes from the #> > ## first location and due to their own selection. #> > ## #> > ## Above scenario will be tested with a simple example of a pedigree bellow. Two #> > ## scenarios will be evaluated: without or with own selection in the second location. #> > ## Selection will always be present in the first location. #> > ## #> > ## Additive genetic values are provided, i.e., no inference is being done! #> > ## #> > ## The idea of this example is not to do extensive simulations, but just to have #> > ## a simple example to see how the partitioning of additive genetic values works. #> >  #> > ### SETUP #> > ###----------------------------------------------------------------------------- #> >  #> > options(width=200) #>  #> > ## install.packages(pkg=c(\"truncnorm\"), dep=TRUE) #> > library(package=\"truncnorm\") #>  #> > ### EXAMPLE PEDIGREE #> > ###----------------------------------------------------------------------------- #> >  #> > ## Generation 0 #> >  id0 <- c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\") #>  #> > fid0 <- mid0 <- rep(NA, times=length(id0)) #>  #> >   h0 <- rep(c(1, 2), each=4) #>  #> >   g0 <- rep(0, times=length(id0)) #>  #> > ## Generation 1 #> >  id1 <- c(\"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\") #>  #> > fid1 <- c(\"02\", \"02\", \"02\", \"02\", \"06\", \"06\", \"06\", \"06\") #>  #> > mid1 <- c(\"01\", \"01\", \"03\", \"04\", \"05\", \"05\", \"07\", \"08\") #>  #> >   h1 <- h0 #>  #> >   g1 <- rep(1, times=length(id1)) #>  #> > ## Generation 2 #> >  id2 <- c(\"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\") #>  #> > fid2 <- c(\"13\", \"13\", \"13\", \"13\", \"13\", \"13\", \"13\", \"13\") #>  #> > mid2 <- c(\"11\", \"12\", \"14\", \"14\", \"15\", \"16\", \"17\", \"18\") #>  #> >   h2 <- h0 #>  #> >   g2 <- rep(2, times=length(id2)) #>  #> > ## Generation 3 #> >  id3 <- c(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\") #>  #> > fid3 <- c(\"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\", \"24\") #>  #> > mid3 <- c(\"21\", \"21\", \"22\", \"23\", \"25\", \"26\", \"27\", \"28\") #>  #> >   h3 <- h0 #>  #> >   g3 <- rep(3, times=length(id3)) #>  #> > ## Generation 4 #> >  id4 <- c(\"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\") #>  #> > fid4 <- c(\"34\", \"34\", \"34\", \"34\", \"34\", \"34\", \"34\", \"34\") #>  #> > mid4 <- c(\"31\", \"32\", \"32\", \"33\", \"35\", \"36\", \"37\", \"38\") #>  #> >   h4 <- h0 #>  #> >   g4 <- rep(4, times=length(id4)) #>  #> > ## Generation 5 #> >  id5 <- c(\"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\") #>  #> > fid5 <- c(\"44\", \"44\", \"44\", \"44\", \"44\", \"44\", \"44\", \"44\") #>  #> > mid5 <- c(\"41\", \"42\", \"43\", \"43\", \"45\", \"46\", \"47\", \"48\") #>  #> >   h5 <- h0 #>  #> >   g5 <- rep(5, times=length(id4)) #>  #> > ped <- data.frame( id=c( id0,  id1,  id2,  id3,  id4,  id5), #> +                   fid=c(fid0, fid1, fid2, fid3, fid4, fid5), #> +                   mid=c(mid0, mid1, mid2, mid3, mid4, mid5), #> +                   loc=c(  h0,   h1,   h2,   h3,   h4,   h5), #> +                   gen=c(  g0,   g1,   g2,   g3,   g4,   g5)) #>  #> > ped$sex <- 2 #>  #> > ped[ped$id %in% ped$fid, \"sex\"] <- 1 #>  #> > ped$loc.gen <- with(ped, paste(loc, gen, sep=\"-\")) #>  #> > ### SIMULATE ADDITIVE GENETIC VALUES - STOHASTIC #> > ###----------------------------------------------------------------------------- #> >  #> > ## --- Parameters of simulation --- #> >  #> > ## Additive genetic mean in founders by location #> > mu1 <- 2 #>  #> > mu2 <- 0 #>  #> > ## Additive genetic variance in population #> > sigma2 <- 1 #>  #> > sigma  <- sqrt(sigma2) #>  #> > ## Threshold value for Mendelian sampling for selection - only values above this #> > ##  will be accepted in simulation #> > t <- 0 #>  #> > ## Set seed for simulation #> > set.seed(seed=19791123) #>  #> > ## --- Start of simulation --- #> >  #> > ped$agv1 <- NA ## Scenario (trait) 1: No selection in the second location #>  #> > ped$agv2 <- NA ## Scenario (trait) 2:    Selection in the second location #>  #> > ## Generation 0  - founders (for simplicity set their values to the mean of location) #> > ped[ped$gen == 0 & ped$loc == 1, c(\"agv1\", \"agv2\")] <- mu1 #>  #> > ped[ped$gen == 0 & ped$loc == 2, c(\"agv1\", \"agv2\")] <- mu2 #>  #> > ## Generation 1+ - non-founders #> > for(i in (length(g0)+1):nrow(ped)) { #> +   ## Scenario (trait) 1: selection only in the first location #> +   if(ped[i, \"loc\"] == 1) { #> +     w <- rtruncnorm(n=1, mean=0, sd=sqrt(sigma2/2), a=t) #> +   } else { #> +     w <-      rnorm(n=1, mean=0, sd=sqrt(sigma2/2)) #> +   } #> +   ped[i, \"agv1\"] <- round(0.5 * ped[ped$id %in% ped[i, \"fid\"], \"agv1\"] + #> +                           0.5 * ped[ped$id %in% ped[i, \"mid\"], \"agv1\"] + #> +                           w, digits=1) #> +   ## Scenario (trait) 2: selection in both locations #> +   if(ped[i, \"loc\"] == 2) { #> +     w <- rtruncnorm(n=1, mean=0, sd=sqrt(sigma2/2), a=t) #> +   } ## for location 1 take the same values as above #> +   ped[i, \"agv2\"] <- round(0.5 * ped[ped$id %in% ped[i, \"fid\"], \"agv2\"] + #> +                           0.5 * ped[ped$id %in% ped[i, \"mid\"], \"agv2\"] + #> +                           w, digits=1) #> + } #>  #> > ### PLOT INDIVIDUAL ADDITIVE GENETIC VALUES #> > ###----------------------------------------------------------------------------- #> >  #> > par(mfrow=c(2, 1), bty=\"l\", pty=\"m\", mar=c(2, 2, 1, 1) + .1, mgp=c(0.7, 0.2, 0)) #>  #> > tmp <- ped$gen + c(-1.5, -0.5, 0.5, 1.5) * 0.1 #>  #> > with(ped, plot(agv1 ~ tmp, pch=c(19, 21)[ped$loc], ylab=\"Additive genetic value\", #> +                xlab=\"Generation\", main=\"Selection in location 1\", axes=FALSE, #> +                ylim=range(c(agv1, agv2)))) #>  #> > axis(1, labels=FALSE, tick=FALSE); axis(2, labels=FALSE, tick=FALSE); box() #>  #> > legend(x=\"topleft\", legend=c(1, 2), title=\"Location\", pch=c(19, 21), bty=\"n\") #>  #> > with(ped, plot(agv2 ~ tmp, pch=c(19, 21)[ped$loc], ylab=\"Additive genetic value\", #> +                xlab=\"Generation\", main=\"Selection in locations 1 and 2\", axes=FALSE, #> +                ylim=range(c(agv1, agv2))))  #>  #> > axis(1, labels=FALSE, tick=FALSE); axis(2, labels=FALSE, tick=FALSE); box() #>  #> > legend(x=\"topleft\", legend=c(1, 2), title=\"Location\", pch=c(19, 21), bty=\"n\") #>  #> > ### PARTITION ADDITIVE GENETIC VALUES BY ... #> > ###----------------------------------------------------------------------------- #> >  #> > ## Compute partitions by location #> > (res <- AlphaPart(x=ped, colPath=\"loc\", colBV=c(\"agv1\", \"agv2\"))) #>  #> Size: #>  - individuals: 48  #>  - traits: 2 (agv1, agv2) #>  - paths: 2 (1, 2) #>  - unknown (missing) values: #> agv1 agv2  #>    0    0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 48  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   id  fid  mid loc gen sex loc.gen agv1 agv1_pa agv1_w agv1_1 agv1_2 #> 1 01 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 2 02 <NA> <NA>   1   0   1     1-0    2       1      1      2      0 #> 3 03 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 4 04 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 5 05 <NA> <NA>   2   0   2     2-0    0       1     -1      0      0 #> 6 06 <NA> <NA>   2   0   1     2-0    0       1     -1      0      0 #> ... #>    id fid mid loc gen sex loc.gen agv1 agv1_pa agv1_w agv1_1 agv1_2 #> 43 53  44  43   1   5   2     1-5  5.3    4.15   1.15   5.30   0.00 #> 44 54  44  43   1   5   2     1-5  4.2    4.15   0.05   4.20   0.00 #> 45 55  44  45   2   5   2     2-5  4.1    3.15   0.95   3.35   0.75 #> 46 56  44  46   2   5   2     2-5  2.7    3.20  -0.50   3.35  -0.65 #> 47 57  44  47   2   5   2     2-5  3.5    3.20   0.30   3.35   0.15 #> 48 58  44  48   2   5   2     2-5  3.8    4.35  -0.55   3.35   0.45 #>  #>  Trait: agv2  #>  #>   id  fid  mid loc gen sex loc.gen agv2 agv2_pa agv2_w agv2_1 agv2_2 #> 1 01 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 2 02 <NA> <NA>   1   0   1     1-0    2       1      1      2      0 #> 3 03 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 4 04 <NA> <NA>   1   0   2     1-0    2       1      1      2      0 #> 5 05 <NA> <NA>   2   0   2     2-0    0       1     -1      0      0 #> 6 06 <NA> <NA>   2   0   1     2-0    0       1     -1      0      0 #> ... #>    id fid mid loc gen sex loc.gen agv2 agv2_pa agv2_w agv2_1 agv2_2 #> 43 53  44  43   1   5   2     1-5  5.3    4.15   1.15   5.30   0.00 #> 44 54  44  43   1   5   2     1-5  4.2    4.15   0.05   4.20   0.00 #> 45 55  44  45   2   5   2     2-5  3.7    3.65   0.05   3.35   0.35 #> 46 56  44  46   2   5   2     2-5  5.2    4.00   1.20   3.35   1.85 #> 47 57  44  47   2   5   2     2-5  4.1    3.90   0.20   3.35   0.75 #> 48 58  44  48   2   5   2     2-5  4.3    3.60   0.70   3.35   0.95 #>  #>  #> > ## Summarize whole population #> > (ret <- summary(res)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   N NA      Sum        1     2 #> 1 1 48 2.466667 2.391667 0.075 #>  #>  Trait: agv2  #>  #>   N NA      Sum        1         2 #> 1 1 48 2.820833 2.391667 0.4291667 #>  #>  #> > ## Summarize and plot by generation (=trend) #> > (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   gen N    Sum      1       2 #> 1   0 8 1.0000 1.0000  0.0000 #> 2   1 8 1.4875 1.2125  0.2750 #> 3   2 8 1.8875 2.0500 -0.1625 #> 4   3 8 2.7500 2.6250  0.1250 #> 5   4 8 3.6125 3.4875  0.1250 #> 6   5 8 4.0625 3.9750  0.0875 #>  #>  Trait: agv2  #>  #>   gen N    Sum      1      2 #> 1   0 8 1.0000 1.0000 0.0000 #> 2   1 8 1.5500 1.2125 0.3375 #> 3   2 8 2.7125 2.0500 0.6625 #> 4   3 8 3.2750 2.6250 0.6500 #> 5   4 8 3.9250 3.4875 0.4375 #> 6   5 8 4.4625 3.9750 0.4875 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends #> > (ret <- summary(res, by=\"loc.gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>    loc.gen N   Sum     1      2 #> 1      1-0 4 2.000 2.000  0.000 #> 2      1-1 4 2.425 2.425  0.000 #> 3      1-2 4 2.700 2.700  0.000 #> 4      1-3 4 3.250 3.250  0.000 #> 5      1-4 4 4.275 4.275  0.000 #> 6      1-5 4 4.600 4.600  0.000 #> 7      2-0 4 0.000 0.000  0.000 #> 8      2-1 4 0.550 0.000  0.550 #> 9      2-2 4 1.075 1.400 -0.325 #> 10     2-3 4 2.250 2.000  0.250 #> 11     2-4 4 2.950 2.700  0.250 #> 12     2-5 4 3.525 3.350  0.175 #>  #>  Trait: agv2  #>  #>    loc.gen N   Sum     1     2 #> 1      1-0 4 2.000 2.000 0.000 #> 2      1-1 4 2.425 2.425 0.000 #> 3      1-2 4 2.700 2.700 0.000 #> 4      1-3 4 3.250 3.250 0.000 #> 5      1-4 4 4.275 4.275 0.000 #> 6      1-5 4 4.600 4.600 0.000 #> 7      2-0 4 0.000 0.000 0.000 #> 8      2-1 4 0.675 0.000 0.675 #> 9      2-2 4 2.725 1.400 1.325 #> 10     2-3 4 3.300 2.000 1.300 #> 11     2-4 4 3.575 2.700 0.875 #> 12     2-5 4 4.325 3.350 0.975 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 1 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 1)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N   Sum     1 2 #> 1     1-0 4 2.000 2.000 0 #> 2     1-1 4 2.425 2.425 0 #> 3     1-2 4 2.700 2.700 0 #> 4     1-3 4 3.250 3.250 0 #> 5     1-4 4 4.275 4.275 0 #> 6     1-5 4 4.600 4.600 0 #>  #>  Trait: agv2  #>  #>   loc.gen N   Sum     1 2 #> 1     1-0 4 2.000 2.000 0 #> 2     1-1 4 2.425 2.425 0 #> 3     1-2 4 2.700 2.700 0 #> 4     1-3 4 3.250 3.250 0 #> 5     1-4 4 4.275 4.275 0 #> 6     1-5 4 4.600 4.600 0 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 2 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 2)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (1, 2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N   Sum    1      2 #> 1     2-0 4 0.000 0.00  0.000 #> 2     2-1 4 0.550 0.00  0.550 #> 3     2-2 4 1.075 1.40 -0.325 #> 4     2-3 4 2.250 2.00  0.250 #> 5     2-4 4 2.950 2.70  0.250 #> 6     2-5 4 3.525 3.35  0.175 #>  #>  Trait: agv2  #>  #>   loc.gen N   Sum    1     2 #> 1     2-0 4 0.000 0.00 0.000 #> 2     2-1 4 0.675 0.00 0.675 #> 3     2-2 4 2.725 1.40 1.325 #> 4     2-3 4 3.300 2.00 1.300 #> 5     2-4 4 3.575 2.70 0.875 #> 6     2-5 4 4.325 3.35 0.975 #>  #>  #> > plot(ret)   #>  #> > ## Compute partitions by location and sex #> > ped$loc.sex <- with(ped, paste(loc, sex, sep=\"-\")) #>  #> > (res <- AlphaPart(x=ped, colPath=\"loc.sex\", colBV=c(\"agv1\", \"agv2\"))) #>  #> Size: #>  - individuals: 48  #>  - traits: 2 (agv1, agv2) #>  - paths: 4 (1-1, 1-2, 2-1, 2-2) #>  - unknown (missing) values: #> agv1 agv2  #>    0    0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 48  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   id  fid  mid loc gen sex loc.gen loc.sex agv1 agv1_pa agv1_w agv1_1-1 agv1_1-2 agv1_2-1 agv1_2-2 #> 1 01 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 2 02 <NA> <NA>   1   0   1     1-0     1-1    2       1      1        2        0        0        0 #> 3 03 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 4 04 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 5 05 <NA> <NA>   2   0   2     2-0     2-2    0       1     -1        0        0        0        0 #> 6 06 <NA> <NA>   2   0   1     2-0     2-1    0       1     -1        0        0        0        0 #> ... #>    id fid mid loc gen sex loc.gen loc.sex agv1 agv1_pa agv1_w agv1_1-1 agv1_1-2 agv1_2-1 agv1_2-2 #> 43 53  44  43   1   5   2     1-5     1-2  5.3    4.15   1.15   2.3250   2.9750        0     0.00 #> 44 54  44  43   1   5   2     1-5     1-2  4.2    4.15   0.05   2.3250   1.8750        0     0.00 #> 45 55  44  45   2   5   2     2-5     2-2  4.1    3.15   0.95   2.2625   1.0875        0     0.75 #> 46 56  44  46   2   5   2     2-5     2-2  2.7    3.20  -0.50   2.2625   1.0875        0    -0.65 #> 47 57  44  47   2   5   2     2-5     2-2  3.5    3.20   0.30   2.2625   1.0875        0     0.15 #> 48 58  44  48   2   5   2     2-5     2-2  3.8    4.35  -0.55   2.2625   1.0875        0     0.45 #>  #>  Trait: agv2  #>  #>   id  fid  mid loc gen sex loc.gen loc.sex agv2 agv2_pa agv2_w agv2_1-1 agv2_1-2 agv2_2-1 agv2_2-2 #> 1 01 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 2 02 <NA> <NA>   1   0   1     1-0     1-1    2       1      1        2        0        0        0 #> 3 03 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 4 04 <NA> <NA>   1   0   2     1-0     1-2    2       1      1        0        2        0        0 #> 5 05 <NA> <NA>   2   0   2     2-0     2-2    0       1     -1        0        0        0        0 #> 6 06 <NA> <NA>   2   0   1     2-0     2-1    0       1     -1        0        0        0        0 #> ... #>    id fid mid loc gen sex loc.gen loc.sex agv2 agv2_pa agv2_w agv2_1-1 agv2_1-2 agv2_2-1 agv2_2-2 #> 43 53  44  43   1   5   2     1-5     1-2  5.3    4.15   1.15   2.3250   2.9750        0     0.00 #> 44 54  44  43   1   5   2     1-5     1-2  4.2    4.15   0.05   2.3250   1.8750        0     0.00 #> 45 55  44  45   2   5   2     2-5     2-2  3.7    3.65   0.05   2.2625   1.0875        0     0.35 #> 46 56  44  46   2   5   2     2-5     2-2  5.2    4.00   1.20   2.2625   1.0875        0     1.85 #> 47 57  44  47   2   5   2     2-5     2-2  4.1    3.90   0.20   2.2625   1.0875        0     0.75 #> 48 58  44  48   2   5   2     2-5     2-2  4.3    3.60   0.70   2.2625   1.0875        0     0.95 #>  #>  #> > ## Summarize and plot by generation (=trend) #> > (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   gen N    Sum     1-1     1-2 2-1     2-2 #> 1   0 8 1.0000 0.25000 0.75000   0  0.0000 #> 2   1 8 1.4875 0.60000 0.61250   0  0.2750 #> 3   2 8 1.8875 1.16875 0.88125   0 -0.1625 #> 4   3 8 2.7500 1.45000 1.17500   0  0.1250 #> 5   4 8 3.6125 1.92500 1.56250   0  0.1250 #> 6   5 8 4.0625 2.29375 1.68125   0  0.0875 #>  #>  Trait: agv2  #>  #>   gen N    Sum     1-1     1-2 2-1    2-2 #> 1   0 8 1.0000 0.25000 0.75000   0 0.0000 #> 2   1 8 1.5500 0.60000 0.61250   0 0.3375 #> 3   2 8 2.7125 1.16875 0.88125   0 0.6625 #> 4   3 8 3.2750 1.45000 1.17500   0 0.6500 #> 5   4 8 3.9250 1.92500 1.56250   0 0.4375 #> 6   5 8 4.4625 2.29375 1.68125   0 0.4875 #>  #>  #> > plot(ret)   #>  #> > plot(ret, lineTypeList=list(\"-1\"=1, \"-2\"=2, def=3))   #>  #> > ## Summarize and plot location specific trends #> > (ret <- summary(res, by=\"loc.gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>    loc.gen N   Sum    1-1    1-2 2-1    2-2 #> 1      1-0 4 2.000 0.5000 1.5000   0  0.000 #> 2      1-1 4 2.425 1.2000 1.2250   0  0.000 #> 3      1-2 4 2.700 1.4375 1.2625   0  0.000 #> 4      1-3 4 3.250 1.6750 1.5750   0  0.000 #> 5      1-4 4 4.275 2.1000 2.1750   0  0.000 #> 6      1-5 4 4.600 2.3250 2.2750   0  0.000 #> 7      2-0 4 0.000 0.0000 0.0000   0  0.000 #> 8      2-1 4 0.550 0.0000 0.0000   0  0.550 #> 9      2-2 4 1.075 0.9000 0.5000   0 -0.325 #> 10     2-3 4 2.250 1.2250 0.7750   0  0.250 #> 11     2-4 4 2.950 1.7500 0.9500   0  0.250 #> 12     2-5 4 3.525 2.2625 1.0875   0  0.175 #>  #>  Trait: agv2  #>  #>    loc.gen N   Sum    1-1    1-2 2-1   2-2 #> 1      1-0 4 2.000 0.5000 1.5000   0 0.000 #> 2      1-1 4 2.425 1.2000 1.2250   0 0.000 #> 3      1-2 4 2.700 1.4375 1.2625   0 0.000 #> 4      1-3 4 3.250 1.6750 1.5750   0 0.000 #> 5      1-4 4 4.275 2.1000 2.1750   0 0.000 #> 6      1-5 4 4.600 2.3250 2.2750   0 0.000 #> 7      2-0 4 0.000 0.0000 0.0000   0 0.000 #> 8      2-1 4 0.675 0.0000 0.0000   0 0.675 #> 9      2-2 4 2.725 0.9000 0.5000   0 1.325 #> 10     2-3 4 3.300 1.2250 0.7750   0 1.300 #> 11     2-4 4 3.575 1.7500 0.9500   0 0.875 #> 12     2-5 4 4.325 2.2625 1.0875   0 0.975 #>  #>  #> > plot(ret, lineTypeList=list(\"-1\"=1, \"-2\"=2, def=3))   #>  #> > ## Summarize and plot location specific trends but only for location 1 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 1)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N   Sum    1-1    1-2 2-1 2-2 #> 1     1-0 4 2.000 0.5000 1.5000   0   0 #> 2     1-1 4 2.425 1.2000 1.2250   0   0 #> 3     1-2 4 2.700 1.4375 1.2625   0   0 #> 4     1-3 4 3.250 1.6750 1.5750   0   0 #> 5     1-4 4 4.275 2.1000 2.1750   0   0 #> 6     1-5 4 4.600 2.3250 2.2750   0   0 #>  #>  Trait: agv2  #>  #>   loc.gen N   Sum    1-1    1-2 2-1 2-2 #> 1     1-0 4 2.000 0.5000 1.5000   0   0 #> 2     1-1 4 2.425 1.2000 1.2250   0   0 #> 3     1-2 4 2.700 1.4375 1.2625   0   0 #> 4     1-3 4 3.250 1.6750 1.5750   0   0 #> 5     1-4 4 4.275 2.1000 2.1750   0   0 #> 6     1-5 4 4.600 2.3250 2.2750   0   0 #>  #>  #> > plot(ret)   #>  #> > ## Summarize and plot location specific trends but only for location 2 #> > (ret <- summary(res, by=\"loc.gen\", subset=res[[1]]$loc == 2)) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 4 (1-1, 1-2, 2-1, 2-2) #>    - traits: 2 (agv1, agv2) #>  #>  Trait: agv1  #>  #>   loc.gen N   Sum    1-1    1-2 2-1    2-2 #> 1     2-0 4 0.000 0.0000 0.0000   0  0.000 #> 2     2-1 4 0.550 0.0000 0.0000   0  0.550 #> 3     2-2 4 1.075 0.9000 0.5000   0 -0.325 #> 4     2-3 4 2.250 1.2250 0.7750   0  0.250 #> 5     2-4 4 2.950 1.7500 0.9500   0  0.250 #> 6     2-5 4 3.525 2.2625 1.0875   0  0.175 #>  #>  Trait: agv2  #>  #>   loc.gen N   Sum    1-1    1-2 2-1   2-2 #> 1     2-0 4 0.000 0.0000 0.0000   0 0.000 #> 2     2-1 4 0.675 0.0000 0.0000   0 0.675 #> 3     2-2 4 2.725 0.9000 0.5000   0 1.325 #> 4     2-3 4 3.300 1.2250 0.7750   0 1.300 #> 5     2-4 4 3.575 1.7500 0.9500   0 0.875 #> 6     2-5 4 4.325 2.2625 1.0875   0 0.975 #>  #>  #> > plot(ret)   #>  #> > ###----------------------------------------------------------------------------- #> > ### demo_stohastic.R ends here # }"},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.plotSummaryAlphaPart.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a plot generate by the function plotSummaryAlphaPart — print.plotSummaryAlphaPart","title":"Print a plot generate by the function plotSummaryAlphaPart — print.plotSummaryAlphaPart","text":"Plot output object plot.summaryAlphaPart.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.plotSummaryAlphaPart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a plot generate by the function plotSummaryAlphaPart — print.plotSummaryAlphaPart","text":"","code":"# S3 method for class 'plotSummaryAlphaPart' print(x, ask, ...)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.plotSummaryAlphaPart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a plot generate by the function plotSummaryAlphaPart — print.plotSummaryAlphaPart","text":"x plotSummaryAlphaPart, output object plot.summaryAlphaPart function ask Logical, ask printing another plot? ... Arguments passed functions (used moment).","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.plotSummaryAlphaPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a plot generate by the function plotSummaryAlphaPart — print.plotSummaryAlphaPart","text":"","code":"## Partition additive genetic values (res <- AlphaPart(x=AlphaPart.ped, colPath=\"country\", colBV=c(\"bv1\", \"bv2\"))) #>  #> Size: #>  - individuals: 8  #>  - traits: 2 (bv1, bv2) #>  - paths: 2 (domestic, import) #>  - unknown (missing) values: #> bv1 bv2  #>   0   0  #>  #>  #>  Partitions of breeding values  #>    - individuals: 8  #>    - paths: 2 (domestic, import) #>    - traits: 2 (bv1, bv2) #>  #>  Trait: bv1  #>  #>   IId FId MId gen  country gender bv1   bv1_pa      bv1_w bv1_domestic bv1_import #> 1   A           1 domestic      F 100 104.3333 -4.3333333      100.000      0.000 #> 2   B           1   import      M 105 104.3333  0.6666667        0.000    105.000 #> 3   C   B   A   2 domestic      F 104 102.5000  1.5000000       51.500     52.500 #> 4   T   B       2   import      F 102  52.5000 49.5000000        0.000    102.000 #> 5   D           2   import      M 108 104.3333  3.6666667        0.000    108.000 #> 6   E   D   C   3 domestic      M 107 106.0000  1.0000000       26.750     80.250 #> 7   U   D       3   import      F 107  54.0000 53.0000000        0.000    107.000 #> 8   V   E       4 domestic      F 109  53.5000 55.5000000       68.875     40.125 #>  #>  Trait: bv2  #>  #>   IId FId MId gen  country gender bv2    bv2_pa      bv2_w bv2_domestic bv2_import #> 1   A           1 domestic      F  88  99.66667 -11.666667           88          0 #> 2   B           1   import      M 110  99.66667  10.333333            0        110 #> 3   C   B   A   2 domestic      F 100  99.00000   1.000000           45         55 #> 4   T   B       2   import      F  97  55.00000  42.000000            0         97 #> 5   D           2   import      M 101  99.66667   1.333333            0        101 #> 6   E   D   C   3 domestic      M  80 100.50000 -20.500000            2         78 #> 7   U   D       3   import      F 102  50.50000  51.500000            0        102 #> 8   V   E       4 domestic      F 105  40.00000  65.000000           66         39 #>   ## Summarize population by generation (=trend) (ret <- summary(res, by=\"gen\")) #>  #>  #>  Summary of partitions of breeding values  #>    - paths: 2 (domestic, import) #>    - traits: 2 (bv1, bv2) #>  #>  Trait: bv1  #>  #>   gen N      Sum domestic import #> 1   1 2 102.5000 50.00000 52.500 #> 2   2 3 104.6667 17.16667 87.500 #> 3   3 2 107.0000 13.37500 93.625 #> 4   4 1 109.0000 68.87500 40.125 #>  #>  Trait: bv2  #>  #>   gen N       Sum domestic   import #> 1   1 2  99.00000       44 55.00000 #> 2   2 3  99.33333       15 84.33333 #> 3   3 2  91.00000        1 90.00000 #> 4   4 1 105.00000       66 39.00000 #>   ## Plot the partitions p <- plot(ret, ylab=c(\"BV for trait 1\", \"BV for trait 2\"), xlab=\"Generation\") print(p[[1]])  print(p[[2]])  #print(p)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.summaryAlphaPart.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for objects of the class summaryAlphaPart. — print.summaryAlphaPart","title":"Print method for objects of the class summaryAlphaPart. — print.summaryAlphaPart","text":"Print method objects class summaryAlphaPart (result summary(AlphaPart(...))).","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.summaryAlphaPart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for objects of the class summaryAlphaPart. — print.summaryAlphaPart","text":"","code":"# S3 method for class 'summaryAlphaPart' print(x, ...)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.summaryAlphaPart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for objects of the class summaryAlphaPart. — print.summaryAlphaPart","text":"x summaryAlphaPart, output object summary.AlphaPart function. ... Arguments passed functions (used moment).","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/print.summaryAlphaPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for objects of the class summaryAlphaPart. — print.summaryAlphaPart","text":"","code":"## --- Partition additive genetic values by loc --- res <- AlphaPart(x=AlphaPart.ped, colPath=\"country\", colBV=c(\"bv1\", \"bv2\")) #>  #> Size: #>  - individuals: 8  #>  - traits: 2 (bv1, bv2) #>  - paths: 2 (domestic, import) #>  - unknown (missing) values: #> bv1 bv2  #>   0   0   ## Summarize whole population ret <- summary(res)  ## Summarize population by generation (=trend) ret <- summary(res, by=\"gen\")  ## Summarize population by generation (=trend) but only for domestic location ret <- summary(res, by=\"gen\", subset=res[[1]]$country == \"domestic\")  ## --- Partition additive genetic values by loc and gender ---  AlphaPart.ped$country.gender <- with(AlphaPart.ped, paste(country, gender, sep=\"-\")) res <- AlphaPart(x=AlphaPart.ped, colPath=\"country.gender\", colBV=c(\"bv1\", \"bv2\")) #>  #> Size: #>  - individuals: 8  #>  - traits: 2 (bv1, bv2) #>  - paths: 4 (domestic-F, domestic-M, import-F, import-M) #>  - unknown (missing) values: #> bv1 bv2  #>   0   0   ## Summarize population by generation (=trend) ret <- summary(res, by=\"gen\")  ## Summarize population by generation (=trend) but only for domestic location ret <- summary(res, by=\"gen\", subset=res[[1]]$country == \"domestic\")"},{"path":"https://alphagenes.github.io/AlphaPart/reference/sEBV.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale EBVs for objects of the class summaryAlphaPart. — sEBV","title":"Scale EBVs for objects of the class summaryAlphaPart. — sEBV","text":"internally called functions used Scale EBVs respect base population objects class AlphaPart.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/sEBV.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scale EBVs for objects of the class summaryAlphaPart. — sEBV","text":"Thiago de Paula Oliveira","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/savePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Save plot method for AlphaPart — savePlot","title":"Save plot method for AlphaPart — savePlot","text":"Save plot method AlphaPart","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/savePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save plot method for AlphaPart — savePlot","text":"","code":"savePlot(...)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/savePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save plot method for AlphaPart — savePlot","text":"... Arguments passed type specific methods, say width height type=\"pdf\" etc.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/savePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save plot method for AlphaPart — savePlot","text":"Beside side effect saving plots disk, filenames printed screen process end invisibly returned.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/savePlot.plotSummaryAlphaPart.html","id":null,"dir":"Reference","previous_headings":"","what":"Save plot objects on the disk for permanent storage. Function savePlot from the grDevices package works for current page on graphical device. This is an attempt to make this function generic so that one can define savePlot methods for particular needs. — savePlot.plotSummaryAlphaPart","title":"Save plot objects on the disk for permanent storage. Function savePlot from the grDevices package works for current page on graphical device. This is an attempt to make this function generic so that one can define savePlot methods for particular needs. — savePlot.plotSummaryAlphaPart","text":"Save plot objects class plotSummaryAlphaPart disk permanent storage.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/savePlot.plotSummaryAlphaPart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save plot objects on the disk for permanent storage. Function savePlot from the grDevices package works for current page on graphical device. This is an attempt to make this function generic so that one can define savePlot methods for particular needs. — savePlot.plotSummaryAlphaPart","text":"","code":"# S3 method for class 'plotSummaryAlphaPart' savePlot(x, filename, type,   device, pre.hook, traitsAsDir, ...)  # Default S3 method savePlot(...)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/savePlot.plotSummaryAlphaPart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save plot objects on the disk for permanent storage. Function savePlot from the grDevices package works for current page on graphical device. This is an attempt to make this function generic so that one can define savePlot methods for particular needs. — savePlot.plotSummaryAlphaPart","text":"x Object chose savePLot method. filename Character, filename save . type Character, file/device type. device Device, device save . pre.hook Function, call code calling print method plots (see examples). traitsAsDir Logical, plots saved within trait folders; construction file.path(dirname(file), trait, basename(file)). folders created exist. ... Arguments passed type specific methods, say width height type=\"pdf\" etc.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/savePlot.plotSummaryAlphaPart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save plot objects on the disk for permanent storage. Function savePlot from the grDevices package works for current page on graphical device. This is an attempt to make this function generic so that one can define savePlot methods for particular needs. — savePlot.plotSummaryAlphaPart","text":"Beside side effect saving plots disk, filenames printed screen process end invisibly returned.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/savePlot.plotSummaryAlphaPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save plot objects on the disk for permanent storage. Function savePlot from the grDevices package works for current page on graphical device. This is an attempt to make this function generic so that one can define savePlot methods for particular needs. — savePlot.plotSummaryAlphaPart","text":"","code":"## Partition additive genetic values res <- AlphaPart(x=AlphaPart.ped, colPath=\"country\", colBV=c(\"bv1\", \"bv2\")) #>  #> Size: #>  - individuals: 8  #>  - traits: 2 (bv1, bv2) #>  - paths: 2 (domestic, import) #>  - unknown (missing) values: #> bv1 bv2  #>   0   0   ## Summarize population by generation (=trend) ret <- summary(res, by=\"gen\")  ## Plot the partitions p <- plot(ret, ylab=c(\"BV for trait 1\", \"BV for trait 2\"), xlab=\"Generation\")  ## Save the plots tmp <- savePlot(x = p, filename=\"test\", type=\"png\") #> test_bv1.png  #> $file #> [1] \"test_bv1.png\" #>  #> test_bv2.png  #> $file #> [1] \"test_bv2.png\" #>   ## Remove the files unlink(tmp)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/summary.AlphaPart.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to summarize AlphaPart object. — summary.AlphaPart","title":"A function to summarize AlphaPart object. — summary.AlphaPart","text":"Breedng values individuals often summarized, either year birth classification. Function summary.AlphaPart provides way ease computation summaries partitions breeding values.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/summary.AlphaPart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to summarize AlphaPart object. — summary.AlphaPart","text":"","code":"# S3 method for class 'AlphaPart' summary(object, by, FUN, labelSum, subset,   sums, cov,  ...)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/summary.AlphaPart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to summarize AlphaPart object. — summary.AlphaPart","text":"object AlphaPart, output object AlphaPart function. Character, name column summary function FUN applied; NULL (default) summary given whole table. FUN Function, function used summary; function return single value per level . labelSum Character, label used overall breeding value. subset Logical, perform summary subset object subsetted argument. sums Logical, link AlphaPart summary.AlphaPart() (internal use!). cov Logical, FALSE returns n variances plus one additional column containing two times sum covariances; otherwise returns n variance n(n-1)/2 covariances form 2*Cov(., .), n number partitions. argument works FUN = var. Defaut cov = FALSE. ... Arguments passed functions (used moment).","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/summary.AlphaPart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to summarize AlphaPart object. — summary.AlphaPart","text":"object class summaryAlphaPart, list data frames summary statistics breeding value partitions. trait dataframe holds summary \"whole/original\" breeding value partitions.  addition another list added (named info) following components holdinfg meta info: path column name holding path information nP number paths lP path labels nT number traits lT trait labels column name variable summary performed warn potential warning messages associated object labelSum column name summary \"whole/original\" breeding values handy plot method (plot.summaryAlphaPart) output.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/summary.AlphaPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to summarize AlphaPart object. — summary.AlphaPart","text":"","code":"## --- Partition additive genetic values by loc --- res <- AlphaPart(x=AlphaPart.ped, colPath=\"country\", colBV=c(\"bv1\", \"bv2\")) #>  #> Size: #>  - individuals: 8  #>  - traits: 2 (bv1, bv2) #>  - paths: 2 (domestic, import) #>  - unknown (missing) values: #> bv1 bv2  #>   0   0   ## Summarize whole population ret <- summary(res)  ## Summarize population by generation (=trend) ret <- summary(res, by=\"gen\")  ## Summarize population by generation (=trend) but only for domestic location ret <- summary(res, by=\"gen\", subset=res[[1]]$country == \"domestic\")  ## --- Partition additive genetic values by loc and gender ---  AlphaPart.ped$country.gender <- with(AlphaPart.ped, paste(country, gender, sep=\"-\")) res <- AlphaPart(x=AlphaPart.ped, colPath=\"country.gender\", colBV=c(\"bv1\", \"bv2\")) #>  #> Size: #>  - individuals: 8  #>  - traits: 2 (bv1, bv2) #>  - paths: 4 (domestic-F, domestic-M, import-F, import-M) #>  - unknown (missing) values: #> bv1 bv2  #>   0   0   ## Summarize population by generation (=trend) ret <- summary(res, by=\"gen\")  ## Summarize population by generation (=trend) but only for domestic location ret <- summary(res, by=\"gen\", subset=res[[1]]$country == \"domestic\")"},{"path":"https://alphagenes.github.io/AlphaPart/reference/write.csv.html","id":null,"dir":"Reference","previous_headings":"","what":"write.csv.R — write.csv","title":"write.csv.R — write.csv","text":"Save summaries partitioned breeding values CSV files disk analyses processing software just saving (backing ) results.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/write.csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write.csv.R — write.csv","text":"","code":"write.csv(...)  # Default S3 method write.csv(...)  # S3 method for class 'AlphaPart' write.csv(x, file, traitsAsDir = FALSE, csv2 = TRUE, row.names = FALSE, ...)  # S3 method for class 'summaryAlphaPart' write.csv(x, file, traitsAsDir = FALSE, csv2 = TRUE, row.names = FALSE, ...)"},{"path":"https://alphagenes.github.io/AlphaPart/reference/write.csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write.csv.R — write.csv","text":"... options passed write.csv2 write.csv. x AlphaPart, object returned AlphaPart function summaryAlphaPart, object returned summary.AlphaPart function. file Character, file name without .csv extension, e.g., \"file\" \"file.csv\" valid. traitsAsDir Logical, results saved within trait folders; construction file.path(dirname(file), trait, basename(file)); folders created exist. csv2 Logical, export using write.csv2 write.csv. row.names Logical, export row names well?","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/write.csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"write.csv.R — write.csv","text":"contains: write.csv - see write.csv details. write.csv.AlphaPart - trait (list component x) file saved disk name \"AlphaPart_trait.csv\", file hold original data breeding value partitions. traitsAsDir=TRUE files saved \"trait/file_trait.csv\". File names printed screen process export end invisibly returned. write.csv.summaryAlphaPart - trait (list component x) file partitions named \"file_trait.csv\" saved disk. traitsAsDir=TRUE files saved \"trait/file_trait_*.csv\". File names printed screen process export end invisibly returned.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/write.csv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"write.csv.R — write.csv","text":"Function write.csv utils package works exported object data.frame matrix. attempt make function generic one can define write.csv methods objects.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/reference/write.csv.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"write.csv.R — write.csv","text":"default: Default write.csv method. AlphaPart: Save partitioned breeding values CSV files disk disk analyses processing software just saving (backing ) results. summaryAlphaPart: Save summaries partitioned breeding values CSV files disk analyses processing software just saving (backing ) results.","code":""},{"path":[]},{"path":"https://alphagenes.github.io/AlphaPart/reference/write.csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"write.csv.R — write.csv","text":"","code":"## Partition additive genetic values res <- AlphaPart(x=AlphaPart.ped, colPath=\"country\", colBV=c(\"bv1\", \"bv2\")) #>  #> Size: #>  - individuals: 8  #>  - traits: 2 (bv1, bv2) #>  - paths: 2 (domestic, import) #>  - unknown (missing) values: #> bv1 bv2  #>   0   0   ## Write summary on the disk and collect saved file names fileName <- file.path(tempdir(), \"AlphaPart\") ret <- write.csv(x=res, file=fileName) #> /tmp/RtmpjVTqqD/AlphaPart_bv1.csv  #> /tmp/RtmpjVTqqD/AlphaPart_bv2.csv  print(ret) #> [1] \"/tmp/RtmpjVTqqD/AlphaPart_bv1.csv\" \"/tmp/RtmpjVTqqD/AlphaPart_bv2.csv\" file.show(ret[1])  ## Clean up files <- dir(path=tempdir(), pattern=\"AlphaPart*\") unlink(x=files)"},{"path":"https://alphagenes.github.io/AlphaPart/news/index.html","id":"changes-in-version-096","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.6","title":"Changes in version 0.9.6","text":"FIXES Downgrade package methods 4.1.3 3.6.2 support old MAC Using function inherits() test class object","code":""},{"path":"https://alphagenes.github.io/AlphaPart/news/index.html","id":"changes-in-version-095","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.5","title":"Changes in version 0.9.5","text":"CRAN release: 2022-07-07 CHANGES Removed dependency: gdata Added dependency: methods BUG FIXES tibble data converted data.frame avoid crash R/RStudio","code":""},{"path":"https://alphagenes.github.io/AlphaPart/news/index.html","id":"changes-in-version-094","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.4","title":"Changes in version 0.9.4","text":"FIXES Internal function transform tibble data data frame (stop crashing) Covariance returned levels colPath higher 1.","code":""},{"path":"https://alphagenes.github.io/AlphaPart/news/index.html","id":"changes-in-version-091","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.1","title":"Changes in version 0.9.1","text":"CRAN release: 2022-02-14 CHANGES Execution time improved approximately 25% Memory usage improved approximately 5%","code":""},{"path":"https://alphagenes.github.io/AlphaPart/news/index.html","id":"changes-in-version-090","dir":"Changelog","previous_headings":"","what":"Changes in version 0.9.0","title":"Changes in version 0.9.0","text":"CRAN release: 2022-01-10 NEW FEATURES AlphaPart now method partitioning trends genetic mean variance understand breeding practices center: detect shift base population mean attributes parent average effect rather Mendelian sampling effect scaleEBV: can define whether appropriate center /scale colBV columns respect base population CHANGES New dependencies: dplyr, magrittr","code":""},{"path":"https://alphagenes.github.io/AlphaPart/news/index.html","id":"changes-in-version-082","dir":"Changelog","previous_headings":"","what":"Changes in version 0.8.2","title":"Changes in version 0.8.2","text":"CRAN release: 2021-09-21 NEW FEATURES AlphaPart now associated paper Genetics Selection Evolution can use cite AlphaPart use paper. DOI: https://doi.org/10.1186/s12711-021-00600-x","code":""}]
